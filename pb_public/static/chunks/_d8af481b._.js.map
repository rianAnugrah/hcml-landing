{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/github/hcml-landing/app/%28admin%29/article/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport PocketBase, { RecordModel } from \"pocketbase\";\n\nconst pb = new PocketBase(\"http://127.0.0.1:8090\");\n\ninterface Article {\n  id?: string;\n  title: string;\n  slug: string;\n  excerpt: string;\n  content: string;\n  author: string;\n  category: string;\n  tags: string[];\n  status: string;\n  featured: boolean;\n  allow_comments: boolean;\n  views: number;\n  reading_time: number;\n  published_at: string;\n  meta_title: string;\n  meta_description: string;\n  meta_keywords: string;\n}\n\nconst initialForm: Article = {\n  title: \"\",\n  slug: \"\",\n  excerpt: \"\",\n  content: \"\",\n  author: \"\",\n  category: \"\",\n  tags: [],\n  status: \"draft\",\n  featured: false,\n  allow_comments: true,\n  views: 0,\n  reading_time: 0,\n  published_at: \"\",\n  meta_title: \"\",\n  meta_description: \"\",\n  meta_keywords: \"\"\n};\n\nexport default function ArticleAdminPage() {\n  const [articles, setArticles] = useState<Article[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [form, setForm] = useState<Article>(initialForm);\n  const [editId, setEditId] = useState<string | null>(null);\n  const [error, setError] = useState(\"\");\n  const [submitting, setSubmitting] = useState(false);\n\n  // Fetch articles\n  const fetchArticles = async () => {\n    setLoading(true);\n    try {\n      const res = await pb.collection(\"news_articles\").getFullList<Article>({\n        sort: \"-created\"\n      });\n      setArticles(res);\n    } catch (e) {\n      setError(\"Failed to fetch articles\");\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchArticles();\n  }, []);\n\n  // Handle form field changes\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value, type } = e.target;\n    if (type === \"checkbox\") {\n      setForm((f) => ({ ...f, [name]: (e.target as HTMLInputElement).checked }));\n    } else if (name === \"tags\") {\n      setForm((f) => ({ ...f, tags: value.split(\",\").map((t: string) => t.trim()).filter(Boolean) }));\n    } else {\n      setForm((f) => ({ ...f, [name]: value }));\n    }\n  };\n\n  // Open modal for create\n  const openCreate = () => {\n    setForm(initialForm);\n    setEditId(null);\n    setModalOpen(true);\n    setError(\"\");\n  };\n\n  // Open modal for edit\n  const openEdit = (article: Article) => {\n    setForm({ ...article, tags: Array.isArray(article.tags) ? article.tags : [] });\n    setEditId(article.id || null);\n    setModalOpen(true);\n    setError(\"\");\n  };\n\n  // Close modal\n  const closeModal = () => {\n    setModalOpen(false);\n    setEditId(null);\n    setForm(initialForm);\n    setError(\"\");\n  };\n\n  // Handle form submit\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setSubmitting(true);\n    setError(\"\");\n    try {\n      const data = {\n        ...form,\n        views: Number(form.views),\n        reading_time: Number(form.reading_time),\n        featured: Boolean(form.featured),\n        allow_comments: Boolean(form.allow_comments),\n        tags: Array.isArray(form.tags) ? form.tags : [],\n      };\n      if (editId) {\n        await pb.collection(\"news_articles\").update(editId, data);\n      } else {\n        await pb.collection(\"news_articles\").create(data);\n      }\n      await fetchArticles();\n      closeModal();\n    } catch (e: any) {\n      setError(e?.message || \"Failed to save article\");\n    }\n    setSubmitting(false);\n  };\n\n  // Handle delete\n  const handleDelete = async (id: string) => {\n    if (!window.confirm(\"Delete this article?\")) return;\n    try {\n      await pb.collection(\"news_articles\").delete(id);\n      setArticles((arts) => arts.filter((a) => a.id !== id));\n    } catch (e) {\n      alert(\"Failed to delete article\");\n    }\n  };\n\n  return (\n    <div className=\"p-8 max-w-6xl mx-auto\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Articles Admin</h1>\n        <button\n          className=\"bg-blue-700 text-white px-4 py-2 rounded hover:bg-blue-900 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2\"\n          onClick={openCreate}\n        >\n          + New Article\n        </button>\n      </div>\n      {loading ? (\n        <div className=\"text-center py-12 text-gray-600\">Loading...</div>\n      ) : (\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full bg-white border border-gray-300 rounded shadow\">\n            <thead>\n              <tr className=\"bg-gray-800 text-white\">\n                <th className=\"p-2 border-b border-gray-300 font-semibold\">Title</th>\n                <th className=\"p-2 border-b border-gray-300 font-semibold\">Slug</th>\n                <th className=\"p-2 border-b border-gray-300 font-semibold\">Status</th>\n                <th className=\"p-2 border-b border-gray-300 font-semibold\">Author</th>\n                <th className=\"p-2 border-b border-gray-300 font-semibold\">Category</th>\n                <th className=\"p-2 border-b border-gray-300 font-semibold\">Tags</th>\n                <th className=\"p-2 border-b border-gray-300 font-semibold\">Views</th>\n                <th className=\"p-2 border-b border-gray-300 font-semibold\">Published</th>\n                <th className=\"p-2 border-b border-gray-300 font-semibold\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {articles.map((a) => (\n                <tr key={a.id} className=\"border-b border-gray-200 hover:bg-gray-100\">\n                  <td className=\"p-2 text-gray-900\">{a.title}</td>\n                  <td className=\"p-2 text-gray-900\">{a.slug}</td>\n                  <td className=\"p-2 text-gray-900\">{a.status}</td>\n                  <td className=\"p-2 text-gray-900\">{a.author}</td>\n                  <td className=\"p-2 text-gray-900\">{a.category}</td>\n                  <td className=\"p-2 text-gray-900\">{Array.isArray(a.tags) ? a.tags.join(\", \") : \"\"}</td>\n                  <td className=\"p-2 text-gray-900\">{a.views}</td>\n                  <td className=\"p-2 text-gray-900\">{a.published_at ? new Date(a.published_at).toLocaleDateString() : \"\"}</td>\n                  <td className=\"p-2 space-x-2\">\n                    <button\n                      className=\"text-blue-800 font-semibold hover:underline focus:outline-none focus:ring-2 focus:ring-blue-400\"\n                      onClick={() => openEdit(a)}\n                    >Edit</button>\n                    <button\n                      className=\"text-red-700 font-semibold hover:underline focus:outline-none focus:ring-2 focus:ring-red-400\"\n                      onClick={() => handleDelete(a.id!)}\n                    >Delete</button>\n                  </td>\n                </tr>\n              ))}\n              {articles.length === 0 && (\n                <tr>\n                  <td colSpan={9} className=\"text-center text-gray-500 py-8\">No articles found.</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n\n      {/* Modal for create/edit */}\n      {modalOpen && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70\">\n          <div className=\"bg-white rounded shadow-lg w-full max-w-2xl p-8 relative border-2 border-gray-800\">\n            <button\n              className=\"absolute top-3 right-3 text-gray-700 hover:text-black text-2xl font-bold focus:outline-none\"\n              onClick={closeModal}\n              aria-label=\"Close\"\n            >\n              Ã—\n            </button>\n            <h2 className=\"text-xl font-semibold mb-4 text-gray-900\">{editId ? \"Edit Article\" : \"New Article\"}</h2>\n            {error && <div className=\"mb-4 text-red-700 font-semibold\">{error}</div>}\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Title</label>\n                  <input name=\"title\" value={form.title} onChange={handleChange} required className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Slug</label>\n                  <input name=\"slug\" value={form.slug} onChange={handleChange} required className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Excerpt</label>\n                  <input name=\"excerpt\" value={form.excerpt} onChange={handleChange} className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Content</label>\n                  <textarea name=\"content\" value={form.content} onChange={handleChange} className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\" rows={3} />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Author (ID)</label>\n                  <input name=\"author\" value={form.author} onChange={handleChange} className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Category (ID)</label>\n                  <input name=\"category\" value={form.category} onChange={handleChange} className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Tags (comma separated IDs)</label>\n                  <input name=\"tags\" value={form.tags.join(\", \")} onChange={handleChange} className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Status</label>\n                  <select name=\"status\" value={form.status} onChange={handleChange} className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\">\n                    <option value=\"draft\">Draft</option>\n                    <option value=\"published\">Published</option>\n                  </select>\n                </div>\n                <div className=\"flex items-center mt-2\">\n                  <input type=\"checkbox\" name=\"featured\" id=\"featured\" checked={form.featured} onChange={handleChange} className=\"mr-2\" />\n                  <label htmlFor=\"featured\" className=\"text-sm font-medium text-gray-900\">Featured</label>\n                </div>\n                <div className=\"flex items-center mt-2\">\n                  <input type=\"checkbox\" name=\"allow_comments\" id=\"allow_comments\" checked={form.allow_comments} onChange={handleChange} className=\"mr-2\" />\n                  <label htmlFor=\"allow_comments\" className=\"text-sm font-medium text-gray-900\">Allow Comments</label>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Views</label>\n                  <input name=\"views\" type=\"number\" value={form.views} onChange={handleChange} className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Reading Time (min)</label>\n                  <input name=\"reading_time\" type=\"number\" value={form.reading_time} onChange={handleChange} className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Published At</label>\n                  <input name=\"published_at\" type=\"datetime-local\" value={form.published_at ? form.published_at.slice(0, 16) : \"\"} onChange={handleChange} className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Meta Title</label>\n                  <input name=\"meta_title\" value={form.meta_title} onChange={handleChange} className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Meta Description</label>\n                  <input name=\"meta_description\" value={form.meta_description} onChange={handleChange} className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900\">Meta Keywords</label>\n                  <input name=\"meta_keywords\" value={form.meta_keywords} onChange={handleChange} className=\"w-full border border-gray-400 rounded px-2 py-1 text-gray-900 bg-white focus:outline-none focus:ring-2 focus:ring-blue-400\" />\n                </div>\n              </div>\n              <div className=\"flex justify-end pt-4\">\n                <button\n                  type=\"button\"\n                  className=\"mr-4 px-4 py-2 rounded border border-gray-400 bg-gray-200 text-gray-900 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400\"\n                  onClick={closeModal}\n                  disabled={submitting}\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"submit\"\n                  className=\"px-6 py-2 rounded bg-blue-800 text-white hover:bg-blue-900 disabled:opacity-60 focus:outline-none focus:ring-2 focus:ring-blue-400\"\n                  disabled={submitting}\n                >\n                  {submitting ? \"Saving...\" : editId ? \"Update\" : \"Create\"}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 965, "column": 0}, "map": {"version":3,"file":"pocketbase.es.mjs","sources":["file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/ClientResponseError.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/tools/cookie.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/tools/jwt.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/stores/BaseAuthStore.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/stores/LocalAuthStore.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/services/BaseService.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/services/SettingsService.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/tools/options.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/services/RealtimeService.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/services/CrudService.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/tools/legacy.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/tools/refresh.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/services/RecordService.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/services/CollectionService.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/services/LogService.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/services/HealthService.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/services/FileService.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/services/BackupService.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/services/CronService.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/tools/formdata.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/services/BatchService.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/Client.ts","file:///D:/github/hcml-landing/node_modules/.pnpm/pocketbase%400.26.1/node_modules/pocketbase/src/stores/AsyncAuthStore.ts"],"sourcesContent":["/**\n * ClientResponseError is a custom Error class that is intended to wrap\n * and normalize any error thrown by `Client.send()`.\n */\nexport class ClientResponseError extends Error {\n    url: string = \"\";\n    status: number = 0;\n    response: { [key: string]: any } = {};\n    isAbort: boolean = false;\n    originalError: any = null;\n\n    constructor(errData?: any) {\n        super(\"ClientResponseError\");\n\n        // Set the prototype explicitly.\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ClientResponseError.prototype);\n\n        if (errData !== null && typeof errData === \"object\") {\n            this.url = typeof errData.url === \"string\" ? errData.url : \"\";\n            this.status = typeof errData.status === \"number\" ? errData.status : 0;\n            this.isAbort = !!errData.isAbort;\n            this.originalError = errData.originalError;\n\n            if (errData.response !== null && typeof errData.response === \"object\") {\n                this.response = errData.response;\n            } else if (errData.data !== null && typeof errData.data === \"object\") {\n                this.response = errData.data;\n            } else {\n                this.response = {};\n            }\n        }\n\n        if (!this.originalError && !(errData instanceof ClientResponseError)) {\n            this.originalError = errData;\n        }\n\n        if (typeof DOMException !== \"undefined\" && errData instanceof DOMException) {\n            this.isAbort = true;\n        }\n\n        this.name = \"ClientResponseError \" + this.status;\n        this.message = this.response?.message;\n        if (!this.message) {\n            if (this.isAbort) {\n                this.message =\n                    \"The request was autocancelled. You can find more info in https://github.com/pocketbase/js-sdk#auto-cancellation.\";\n            } else if (this.originalError?.cause?.message?.includes(\"ECONNREFUSED ::1\")) {\n                this.message =\n                    \"Failed to connect to the PocketBase server. Try changing the SDK URL from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21).\";\n            } else {\n                this.message = \"Something went wrong.\";\n            }\n        }\n\n        // set this.cause so that JS debugging tools can automatically connect\n        // the dots between the original error and the wrapped one\n        this.cause = this.originalError;\n    }\n\n    /**\n     * Alias for `this.response` for backward compatibility.\n     */\n    get data() {\n        return this.response;\n    }\n\n    /**\n     * Make a POJO's copy of the current error class instance.\n     * @see https://github.com/vuex-orm/vuex-orm/issues/255\n     */\n    toJSON() {\n        return { ...this };\n    }\n}\n","/**\n * -------------------------------------------------------------------\n * Simple cookie parse and serialize utilities mostly based on the\n * node module https://github.com/jshttp/cookie.\n * -------------------------------------------------------------------\n */\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\nexport interface ParseOptions {\n    decode?: (val: string) => string;\n}\n\n/**\n * Parses the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n */\nexport function cookieParse(str: string, options?: ParseOptions): { [key: string]: any } {\n    const result: { [key: string]: any } = {};\n\n    if (typeof str !== \"string\") {\n        return result;\n    }\n\n    const opt = Object.assign({}, options || {});\n    const decode = opt.decode || defaultDecode;\n\n    let index = 0;\n    while (index < str.length) {\n        const eqIdx = str.indexOf(\"=\", index);\n\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n\n        let endIdx = str.indexOf(\";\", index);\n\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n            continue;\n        }\n\n        const key = str.slice(index, eqIdx).trim();\n\n        // only assign once\n        if (undefined === result[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n\n            try {\n                result[key] = decode(val);\n            } catch (_) {\n                result[key] = val; // no decoding\n            }\n        }\n\n        index = endIdx + 1;\n    }\n\n    return result;\n}\n\nexport interface SerializeOptions {\n    encode?: (val: string | number | boolean) => string;\n    maxAge?: number;\n    domain?: string;\n    path?: string;\n    expires?: Date;\n    httpOnly?: boolean;\n    secure?: boolean;\n    priority?: string;\n    sameSite?: boolean | string;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * ```js\n * cookieSerialize('foo', 'bar', { httpOnly: true }) // \"foo=bar; httpOnly\"\n * ```\n */\nexport function cookieSerialize(\n    name: string,\n    val: string,\n    options?: SerializeOptions,\n): string {\n    const opt = Object.assign({}, options || {});\n    const encode = opt.encode || defaultEncode;\n\n    if (!fieldContentRegExp.test(name)) {\n        throw new TypeError(\"argument name is invalid\");\n    }\n\n    const value = encode(val);\n\n    if (value && !fieldContentRegExp.test(value)) {\n        throw new TypeError(\"argument val is invalid\");\n    }\n\n    let result = name + \"=\" + value;\n\n    if (opt.maxAge != null) {\n        const maxAge = opt.maxAge - 0;\n\n        if (isNaN(maxAge) || !isFinite(maxAge)) {\n            throw new TypeError(\"option maxAge is invalid\");\n        }\n\n        result += \"; Max-Age=\" + Math.floor(maxAge);\n    }\n\n    if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n            throw new TypeError(\"option domain is invalid\");\n        }\n\n        result += \"; Domain=\" + opt.domain;\n    }\n\n    if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n            throw new TypeError(\"option path is invalid\");\n        }\n\n        result += \"; Path=\" + opt.path;\n    }\n\n    if (opt.expires) {\n        if (!isDate(opt.expires) || isNaN(opt.expires.valueOf())) {\n            throw new TypeError(\"option expires is invalid\");\n        }\n\n        result += \"; Expires=\" + opt.expires.toUTCString();\n    }\n\n    if (opt.httpOnly) {\n        result += \"; HttpOnly\";\n    }\n\n    if (opt.secure) {\n        result += \"; Secure\";\n    }\n\n    if (opt.priority) {\n        const priority =\n            typeof opt.priority === \"string\" ? opt.priority.toLowerCase() : opt.priority;\n\n        switch (priority) {\n            case \"low\":\n                result += \"; Priority=Low\";\n                break;\n            case \"medium\":\n                result += \"; Priority=Medium\";\n                break;\n            case \"high\":\n                result += \"; Priority=High\";\n                break;\n            default:\n                throw new TypeError(\"option priority is invalid\");\n        }\n    }\n\n    if (opt.sameSite) {\n        const sameSite =\n            typeof opt.sameSite === \"string\" ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n        switch (sameSite) {\n            case true:\n                result += \"; SameSite=Strict\";\n                break;\n            case \"lax\":\n                result += \"; SameSite=Lax\";\n                break;\n            case \"strict\":\n                result += \"; SameSite=Strict\";\n                break;\n            case \"none\":\n                result += \"; SameSite=None\";\n                break;\n            default:\n                throw new TypeError(\"option sameSite is invalid\");\n        }\n    }\n\n    return result;\n}\n\n/**\n * Default URL-decode string value function.\n * Optimized to skip native call when no `%`.\n */\nfunction defaultDecode(val: string): string {\n    return val.indexOf(\"%\") !== -1 ? decodeURIComponent(val) : val;\n}\n\n/**\n * Default URL-encode value function.\n */\nfunction defaultEncode(val: string | number | boolean): string {\n    return encodeURIComponent(val);\n}\n\n/**\n * Determines if value is a Date.\n */\nfunction isDate(val: any): boolean {\n    return Object.prototype.toString.call(val) === \"[object Date]\" || val instanceof Date;\n}\n","// @todo remove after https://github.com/reactwg/react-native-releases/issues/287\nconst isReactNative =\n    (typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\") ||\n    (typeof global !== \"undefined\" && (global as any).HermesInternal);\n\nlet atobPolyfill: Function;\nif (typeof atob === \"function\" && !isReactNative) {\n    atobPolyfill = atob;\n} else {\n    /**\n     * The code was extracted from:\n     * https://github.com/davidchambers/Base64.js\n     */\n    atobPolyfill = (input: any) => {\n        const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n        let str = String(input).replace(/=+$/, \"\");\n        if (str.length % 4 == 1) {\n            throw new Error(\n                \"'atob' failed: The string to be decoded is not correctly encoded.\",\n            );\n        }\n\n        for (\n            // initialize result and counters\n            var bc = 0, bs, buffer, idx = 0, output = \"\";\n            // get next character\n            (buffer = str.charAt(idx++));\n            // character found in table? initialize bit storage and add its ascii value;\n            ~buffer &&\n            ((bs = bc % 4 ? (bs as any) * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4)\n                ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n                : 0\n        ) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n\n        return output;\n    };\n}\n\n/**\n * Returns JWT token's payload data.\n */\nexport function getTokenPayload(token: string): { [key: string]: any } {\n    if (token) {\n        try {\n            const encodedPayload = decodeURIComponent(\n                atobPolyfill(token.split(\".\")[1])\n                    .split(\"\")\n                    .map(function (c: string) {\n                        return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n                    })\n                    .join(\"\"),\n            );\n\n            return JSON.parse(encodedPayload) || {};\n        } catch (e) {}\n    }\n\n    return {};\n}\n\n/**\n * Checks whether a JWT token is expired or not.\n * Tokens without `exp` payload key are considered valid.\n * Tokens with empty payload (eg. invalid token strings) are considered expired.\n *\n * @param token The token to check.\n * @param [expirationThreshold] Time in seconds that will be subtracted from the token `exp` property.\n */\nexport function isTokenExpired(token: string, expirationThreshold = 0): boolean {\n    let payload = getTokenPayload(token);\n\n    if (\n        Object.keys(payload).length > 0 &&\n        (!payload.exp || payload.exp - expirationThreshold > Date.now() / 1000)\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","import { cookieParse, cookieSerialize, SerializeOptions } from \"@/tools/cookie\";\nimport { isTokenExpired, getTokenPayload } from \"@/tools/jwt\";\nimport { RecordModel } from \"@/tools/dtos\";\n\nexport type AuthRecord = RecordModel | null;\n\nexport type AuthModel = AuthRecord; // for backward compatibility\n\nexport type OnStoreChangeFunc = (token: string, record: AuthRecord) => void;\n\nconst defaultCookieKey = \"pb_auth\";\n\n/**\n * Base AuthStore class that stores the auth state in runtime memory (aka. only for the duration of the store instane).\n *\n * Usually you wouldn't use it directly and instead use the builtin LocalAuthStore, AsyncAuthStore\n * or extend it with your own custom implementation.\n */\nexport class BaseAuthStore {\n    protected baseToken: string = \"\";\n    protected baseModel: AuthRecord = null;\n\n    private _onChangeCallbacks: Array<OnStoreChangeFunc> = [];\n\n    /**\n     * Retrieves the stored token (if any).\n     */\n    get token(): string {\n        return this.baseToken;\n    }\n\n    /**\n     * Retrieves the stored model data (if any).\n     */\n    get record(): AuthRecord {\n        return this.baseModel;\n    }\n\n    /**\n     * @deprecated use `record` instead.\n     */\n    get model(): AuthRecord {\n        return this.baseModel;\n    }\n\n    /**\n     * Loosely checks if the store has valid token (aka. existing and unexpired exp claim).\n     */\n    get isValid(): boolean {\n        return !isTokenExpired(this.token);\n    }\n\n    /**\n     * Loosely checks whether the currently loaded store state is for superuser.\n     *\n     * Alternatively you can also compare directly `pb.authStore.record?.collectionName`.\n     */\n    get isSuperuser(): boolean {\n        let payload = getTokenPayload(this.token);\n\n        return (\n            payload.type == \"auth\" &&\n            (this.record?.collectionName == \"_superusers\" ||\n                // fallback in case the record field is not populated and assuming\n                // that the collection crc32 checksum id wasn't manually changed\n                (!this.record?.collectionName &&\n                    payload.collectionId == \"pbc_3142635823\"))\n        );\n    }\n\n    /**\n     * @deprecated use `isSuperuser` instead or simply check the record.collectionName property.\n     */\n    get isAdmin(): boolean {\n        console.warn(\n            \"Please replace pb.authStore.isAdmin with pb.authStore.isSuperuser OR simply check the value of pb.authStore.record?.collectionName\",\n        );\n        return this.isSuperuser;\n    }\n\n    /**\n     * @deprecated use `!isSuperuser` instead or simply check the record.collectionName property.\n     */\n    get isAuthRecord(): boolean {\n        console.warn(\n            \"Please replace pb.authStore.isAuthRecord with !pb.authStore.isSuperuser OR simply check the value of pb.authStore.record?.collectionName\",\n        );\n        return getTokenPayload(this.token).type == \"auth\" && !this.isSuperuser;\n    }\n\n    /**\n     * Saves the provided new token and model data in the auth store.\n     */\n    save(token: string, record?: AuthRecord): void {\n        this.baseToken = token || \"\";\n        this.baseModel = record || null;\n\n        this.triggerChange();\n    }\n\n    /**\n     * Removes the stored token and model data form the auth store.\n     */\n    clear(): void {\n        this.baseToken = \"\";\n        this.baseModel = null;\n        this.triggerChange();\n    }\n\n    /**\n     * Parses the provided cookie string and updates the store state\n     * with the cookie's token and model data.\n     *\n     * NB! This function doesn't validate the token or its data.\n     * Usually this isn't a concern if you are interacting only with the\n     * PocketBase API because it has the proper server-side security checks in place,\n     * but if you are using the store `isValid` state for permission controls\n     * in a node server (eg. SSR), then it is recommended to call `authRefresh()`\n     * after loading the cookie to ensure an up-to-date token and model state.\n     * For example:\n     *\n     * ```js\n     * pb.authStore.loadFromCookie(\"cookie string...\");\n     *\n     * try {\n     *     // get an up-to-date auth store state by veryfing and refreshing the loaded auth model (if any)\n     *     pb.authStore.isValid && await pb.collection('users').authRefresh();\n     * } catch (_) {\n     *     // clear the auth store on failed refresh\n     *     pb.authStore.clear();\n     * }\n     * ```\n     */\n    loadFromCookie(cookie: string, key = defaultCookieKey): void {\n        const rawData = cookieParse(cookie || \"\")[key] || \"\";\n\n        let data: { [key: string]: any } = {};\n        try {\n            data = JSON.parse(rawData);\n            // normalize\n            if (typeof data === null || typeof data !== \"object\" || Array.isArray(data)) {\n                data = {};\n            }\n        } catch (_) {}\n\n        this.save(data.token || \"\", data.record || data.model || null);\n    }\n\n    /**\n     * Exports the current store state as cookie string.\n     *\n     * By default the following optional attributes are added:\n     * - Secure\n     * - HttpOnly\n     * - SameSite=Strict\n     * - Path=/\n     * - Expires={the token expiration date}\n     *\n     * NB! If the generated cookie exceeds 4096 bytes, this method will\n     * strip the model data to the bare minimum to try to fit within the\n     * recommended size in https://www.rfc-editor.org/rfc/rfc6265#section-6.1.\n     */\n    exportToCookie(options?: SerializeOptions, key = defaultCookieKey): string {\n        const defaultOptions: SerializeOptions = {\n            secure: true,\n            sameSite: true,\n            httpOnly: true,\n            path: \"/\",\n        };\n\n        // extract the token expiration date\n        const payload = getTokenPayload(this.token);\n        if (payload?.exp) {\n            defaultOptions.expires = new Date(payload.exp * 1000);\n        } else {\n            defaultOptions.expires = new Date(\"1970-01-01\");\n        }\n\n        // merge with the user defined options\n        options = Object.assign({}, defaultOptions, options);\n\n        const rawData = {\n            token: this.token,\n            record: this.record ? JSON.parse(JSON.stringify(this.record)) : null,\n        };\n\n        let result = cookieSerialize(key, JSON.stringify(rawData), options);\n\n        const resultLength =\n            typeof Blob !== \"undefined\" ? new Blob([result]).size : result.length;\n\n        // strip down the model data to the bare minimum\n        if (rawData.record && resultLength > 4096) {\n            rawData.record = { id: rawData.record?.id, email: rawData.record?.email };\n            const extraProps = [\"collectionId\", \"collectionName\", \"verified\"];\n            for (const prop in this.record) {\n                if (extraProps.includes(prop)) {\n                    rawData.record[prop] = this.record[prop];\n                }\n            }\n            result = cookieSerialize(key, JSON.stringify(rawData), options);\n        }\n\n        return result;\n    }\n\n    /**\n     * Register a callback function that will be called on store change.\n     *\n     * You can set the `fireImmediately` argument to true in order to invoke\n     * the provided callback right after registration.\n     *\n     * Returns a removal function that you could call to \"unsubscribe\" from the changes.\n     */\n    onChange(callback: OnStoreChangeFunc, fireImmediately = false): () => void {\n        this._onChangeCallbacks.push(callback);\n\n        if (fireImmediately) {\n            callback(this.token, this.record);\n        }\n\n        return () => {\n            for (let i = this._onChangeCallbacks.length - 1; i >= 0; i--) {\n                if (this._onChangeCallbacks[i] == callback) {\n                    delete this._onChangeCallbacks[i]; // removes the function reference\n                    this._onChangeCallbacks.splice(i, 1); // reindex the array\n                    return;\n                }\n            }\n        };\n    }\n\n    protected triggerChange(): void {\n        for (const callback of this._onChangeCallbacks) {\n            callback && callback(this.token, this.record);\n        }\n    }\n}\n","import { BaseAuthStore, AuthRecord } from \"@/stores/BaseAuthStore\";\n\n/**\n * The default token store for browsers with auto fallback\n * to runtime/memory if local storage is undefined (e.g. in node env).\n */\nexport class LocalAuthStore extends BaseAuthStore {\n    private storageFallback: { [key: string]: any } = {};\n    private storageKey: string;\n\n    constructor(storageKey = \"pocketbase_auth\") {\n        super();\n\n        this.storageKey = storageKey;\n\n        this._bindStorageEvent();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get token(): string {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.token || \"\";\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get record(): AuthRecord {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.record || data.model || null;\n    }\n\n    /**\n     * @deprecated use `record` instead.\n     */\n    get model(): AuthRecord {\n        return this.record;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, record?: AuthRecord) {\n        this._storageSet(this.storageKey, {\n            token: token,\n            record: record,\n        });\n\n        super.save(token, record);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear() {\n        this._storageRemove(this.storageKey);\n\n        super.clear();\n    }\n\n    // ---------------------------------------------------------------\n    // Internal helpers:\n    // ---------------------------------------------------------------\n\n    /**\n     * Retrieves `key` from the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageGet(key: string): any {\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            const rawValue = window.localStorage.getItem(key) || \"\";\n            try {\n                return JSON.parse(rawValue);\n            } catch (e) {\n                // not a json\n                return rawValue;\n            }\n        }\n\n        // fallback\n        return this.storageFallback[key];\n    }\n\n    /**\n     * Stores a new data in the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageSet(key: string, value: any) {\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            // store in local storage\n            let normalizedVal = value;\n            if (typeof value !== \"string\") {\n                normalizedVal = JSON.stringify(value);\n            }\n            window.localStorage.setItem(key, normalizedVal);\n        } else {\n            // store in fallback\n            this.storageFallback[key] = value;\n        }\n    }\n\n    /**\n     * Removes `key` from the browser's local storage and the runtime/memory.\n     */\n    private _storageRemove(key: string) {\n        // delete from local storage\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            window.localStorage?.removeItem(key);\n        }\n\n        // delete from fallback\n        delete this.storageFallback[key];\n    }\n\n    /**\n     * Updates the current store state on localStorage change.\n     */\n    private _bindStorageEvent() {\n        if (\n            typeof window === \"undefined\" ||\n            !window?.localStorage ||\n            !window.addEventListener\n        ) {\n            return;\n        }\n\n        window.addEventListener(\"storage\", (e) => {\n            if (e.key != this.storageKey) {\n                return;\n            }\n\n            const data = this._storageGet(this.storageKey) || {};\n\n            super.save(data.token || \"\", data.record || data.model || null);\n        });\n    }\n}\n","import Client from \"@/Client\";\n\n/**\n * BaseService class that should be inherited from all API services.\n */\nexport abstract class BaseService {\n    readonly client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions } from \"@/tools/options\";\n\ninterface appleClientSecret {\n    secret: string;\n}\n\nexport class SettingsService extends BaseService {\n    /**\n     * Fetch all available app settings.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getAll(options?: CommonOptions): Promise<{ [key: string]: any }> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings\", options);\n    }\n\n    /**\n     * Bulk updates app settings.\n     *\n     * @throws {ClientResponseError}\n     */\n    async update(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<{ [key: string]: any }> {\n        options = Object.assign(\n            {\n                method: \"PATCH\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings\", options);\n    }\n\n    /**\n     * Performs a S3 filesystem connection test.\n     *\n     * The currently supported `filesystem` are \"storage\" and \"backups\".\n     *\n     * @throws {ClientResponseError}\n     */\n    async testS3(\n        filesystem: string = \"storage\",\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    filesystem: filesystem,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/test/s3\", options).then(() => true);\n    }\n\n    /**\n     * Sends a test email.\n     *\n     * The possible `emailTemplate` values are:\n     * - verification\n     * - password-reset\n     * - email-change\n     *\n     * @throws {ClientResponseError}\n     */\n    async testEmail(\n        collectionIdOrName: string,\n        toEmail: string,\n        emailTemplate: string,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    email: toEmail,\n                    template: emailTemplate,\n                    collection: collectionIdOrName,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/test/email\", options).then(() => true);\n    }\n\n    /**\n     * Generates a new Apple OAuth2 client secret.\n     *\n     * @throws {ClientResponseError}\n     */\n    async generateAppleClientSecret(\n        clientId: string,\n        teamId: string,\n        keyId: string,\n        privateKey: string,\n        duration: number,\n        options?: CommonOptions,\n    ): Promise<appleClientSecret> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    clientId,\n                    teamId,\n                    keyId,\n                    privateKey,\n                    duration,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/apple/generate-client-secret\", options);\n    }\n}\n","export interface SendOptions extends RequestInit {\n    // for backward compatibility and to minimize the verbosity,\n    // any top-level field that doesn't exist in RequestInit or the\n    // fields below will be treated as query parameter.\n    [key: string]: any;\n\n    /**\n     * Optional custom fetch function to use for sending the request.\n     */\n    fetch?: (url: RequestInfo | URL, config?: RequestInit) => Promise<Response>;\n\n    /**\n     * Custom headers to send with the requests.\n     */\n    headers?: { [key: string]: string };\n\n    /**\n     * The body of the request (serialized automatically for json requests).\n     */\n    body?: any;\n\n    /**\n     * Query parameters that will be appended to the request url.\n     */\n    query?: { [key: string]: any };\n\n    /**\n     * @deprecated use `query` instead\n     *\n     * for backward-compatibility `params` values are merged with `query`,\n     * but this option may get removed in the final v1 release\n     */\n    params?: { [key: string]: any };\n\n    /**\n     * The request identifier that can be used to cancel pending requests.\n     */\n    requestKey?: string | null;\n\n    /**\n     * @deprecated use `requestKey:string` instead\n     */\n    $cancelKey?: string;\n\n    /**\n     * @deprecated use `requestKey:null` instead\n     */\n    $autoCancel?: boolean;\n}\n\nexport interface CommonOptions extends SendOptions {\n    fields?: string;\n}\n\nexport interface ListOptions extends CommonOptions {\n    page?: number;\n    perPage?: number;\n    sort?: string;\n    filter?: string;\n    skipTotal?: boolean;\n}\n\nexport interface FullListOptions extends ListOptions {\n    batch?: number;\n}\n\nexport interface RecordOptions extends CommonOptions {\n    expand?: string;\n}\n\nexport interface RecordListOptions extends ListOptions, RecordOptions {}\n\nexport interface RecordFullListOptions extends FullListOptions, RecordOptions {}\n\nexport interface RecordSubscribeOptions extends SendOptions {\n    fields?: string;\n    filter?: string;\n    expand?: string;\n}\n\nexport interface LogStatsOptions extends CommonOptions {\n    filter?: string;\n}\n\nexport interface FileOptions extends CommonOptions {\n    thumb?: string;\n    download?: boolean;\n}\n\nexport interface AuthOptions extends CommonOptions {\n    /**\n     * If autoRefreshThreshold is set it will take care to auto refresh\n     * when necessary the auth data before each request to ensure that\n     * the auth state is always valid.\n     *\n     * The value must be in seconds, aka. the amount of seconds\n     * that will be subtracted from the current token `exp` claim in order\n     * to determine whether it is going to expire within the specified time threshold.\n     *\n     * For example, if you want to auto refresh the token if it is\n     * going to expire in the next 30mins (or already has expired),\n     * it can be set to `1800`\n     */\n    autoRefreshThreshold?: number;\n}\n\n// -------------------------------------------------------------------\n\n// list of known SendOptions keys (everything else is treated as query param)\nconst knownSendOptionsKeys = [\n    \"requestKey\",\n    \"$cancelKey\",\n    \"$autoCancel\",\n    \"fetch\",\n    \"headers\",\n    \"body\",\n    \"query\",\n    \"params\",\n    // ---,\n    \"cache\",\n    \"credentials\",\n    \"headers\",\n    \"integrity\",\n    \"keepalive\",\n    \"method\",\n    \"mode\",\n    \"redirect\",\n    \"referrer\",\n    \"referrerPolicy\",\n    \"signal\",\n    \"window\",\n];\n\n// modifies in place the provided options by moving unknown send options as query parameters.\nexport function normalizeUnknownQueryParams(options?: SendOptions): void {\n    if (!options) {\n        return;\n    }\n\n    options.query = options.query || {};\n    for (let key in options) {\n        if (knownSendOptionsKeys.includes(key)) {\n            continue;\n        }\n\n        options.query[key] = options[key];\n        delete options[key];\n    }\n}\n\nexport function serializeQueryParams(params: { [key: string]: any }): string {\n    const result: Array<string> = [];\n\n    for (const key in params) {\n        const encodedKey = encodeURIComponent(key);\n        const arrValue = Array.isArray(params[key]) ? params[key] : [params[key]];\n\n        for (let v of arrValue) {\n            v = prepareQueryParamValue(v);\n            if (v === null) {\n                continue;\n            }\n            result.push(encodedKey + \"=\" + v);\n        }\n    }\n\n    return result.join(\"&\");\n}\n\n// encodes and normalizes the provided query param value.\nfunction prepareQueryParamValue(value: any): null | string {\n    if (value === null || typeof value === \"undefined\") {\n        return null;\n    }\n\n    if (value instanceof Date) {\n        return encodeURIComponent(value.toISOString().replace(\"T\", \" \"));\n    }\n\n    if (typeof value === \"object\") {\n        return encodeURIComponent(JSON.stringify(value));\n    }\n\n    return encodeURIComponent(value);\n}\n","import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseService } from \"@/services/BaseService\";\nimport { SendOptions, normalizeUnknownQueryParams } from \"@/tools/options\";\n\ninterface promiseCallbacks {\n    resolve: Function;\n    reject: Function;\n}\n\ntype Subscriptions = { [key: string]: Array<EventListener> };\n\nexport type UnsubscribeFunc = () => Promise<void>;\n\nexport class RealtimeService extends BaseService {\n    clientId: string = \"\";\n\n    private eventSource: EventSource | null = null;\n    private subscriptions: Subscriptions = {};\n    private lastSentSubscriptions: Array<string> = [];\n    private connectTimeoutId: any;\n    private maxConnectTimeout: number = 15000;\n    private reconnectTimeoutId: any;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = Infinity;\n    private predefinedReconnectIntervals: Array<number> = [\n        200, 300, 500, 1000, 1200, 1500, 2000,\n    ];\n    private pendingConnects: Array<promiseCallbacks> = [];\n\n    /**\n     * Returns whether the realtime connection has been established.\n     */\n    get isConnected(): boolean {\n        return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;\n    }\n\n    /**\n     * An optional hook that is invoked when the realtime client disconnects\n     * either when unsubscribing from all subscriptions or when the\n     * connection was interrupted or closed by the server.\n     *\n     * The received argument could be used to determine whether the disconnect\n     * is a result from unsubscribing (`activeSubscriptions.length == 0`)\n     * or because of network/server error (`activeSubscriptions.length > 0`).\n     *\n     * If you want to listen for the opposite, aka. when the client connection is established,\n     * subscribe to the `PB_CONNECT` event.\n     */\n    onDisconnect?: (activeSubscriptions: Array<string>) => void;\n\n    /**\n     * Register the subscription listener.\n     *\n     * You can subscribe multiple times to the same topic.\n     *\n     * If the SSE connection is not started yet,\n     * this method will also initialize it.\n     */\n    async subscribe(\n        topic: string,\n        callback: (data: any) => void,\n        options?: SendOptions,\n    ): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error(\"topic must be set.\");\n        }\n\n        let key = topic;\n\n        // serialize and append the topic options (if any)\n        if (options) {\n            options = Object.assign({}, options); // shallow copy\n            normalizeUnknownQueryParams(options);\n            const serialized =\n                \"options=\" +\n                encodeURIComponent(\n                    JSON.stringify({ query: options.query, headers: options.headers }),\n                );\n            key += (key.includes(\"?\") ? \"&\" : \"?\") + serialized;\n        }\n\n        const listener = function (e: Event) {\n            const msgEvent = e as MessageEvent;\n\n            let data;\n            try {\n                data = JSON.parse(msgEvent?.data);\n            } catch {}\n\n            callback(data || {});\n        };\n\n        // store the listener\n        if (!this.subscriptions[key]) {\n            this.subscriptions[key] = [];\n        }\n        this.subscriptions[key].push(listener);\n\n        if (!this.isConnected) {\n            // initialize sse connection\n            await this.connect();\n        } else if (this.subscriptions[key].length === 1) {\n            // send the updated subscriptions (if it is the first for the key)\n            await this.submitSubscriptions();\n        } else {\n            // only register the listener\n            this.eventSource?.addEventListener(key, listener);\n        }\n\n        return async (): Promise<void> => {\n            return this.unsubscribeByTopicAndListener(topic, listener);\n        };\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners with the specified topic.\n     *\n     * If `topic` is not provided, then this method will unsubscribe\n     * from all active subscriptions.\n     *\n     * This method is no-op if there are no active subscriptions.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        let needToSubmit = false;\n\n        if (!topic) {\n            // remove all subscriptions\n            this.subscriptions = {};\n        } else {\n            // remove all listeners related to the topic\n            const subs = this.getSubscriptionsByTopic(topic);\n            for (let key in subs) {\n                if (!this.hasSubscriptionListeners(key)) {\n                    continue; // already unsubscribed\n                }\n\n                for (let listener of this.subscriptions[key]) {\n                    this.eventSource?.removeEventListener(key, listener);\n                }\n                delete this.subscriptions[key];\n\n                // mark for subscriptions change submit if there are no other listeners\n                if (!needToSubmit) {\n                    needToSubmit = true;\n                }\n            }\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (needToSubmit) {\n            await this.submitSubscriptions();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners starting with the specified topic prefix.\n     *\n     * This method is no-op if there are no active subscriptions with the specified topic prefix.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByPrefix(keyPrefix: string): Promise<void> {\n        let hasAtleastOneTopic = false;\n        for (let key in this.subscriptions) {\n            // \"?\" so that it can be used as end delimiter for the prefix\n            if (!(key + \"?\").startsWith(keyPrefix)) {\n                continue;\n            }\n\n            hasAtleastOneTopic = true;\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource?.removeEventListener(key, listener);\n            }\n            delete this.subscriptions[key];\n        }\n\n        if (!hasAtleastOneTopic) {\n            return; // nothing to unsubscribe from\n        }\n\n        if (this.hasSubscriptionListeners()) {\n            // submit the deleted subscriptions\n            await this.submitSubscriptions();\n        } else {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscriptions matching the specified topic and listener function.\n     *\n     * This method is no-op if there are no active subscription with\n     * the specified topic and listener.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByTopicAndListener(\n        topic: string,\n        listener: EventListener,\n    ): Promise<void> {\n        let needToSubmit = false;\n\n        const subs = this.getSubscriptionsByTopic(topic);\n        for (let key in subs) {\n            if (\n                !Array.isArray(this.subscriptions[key]) ||\n                !this.subscriptions[key].length\n            ) {\n                continue; // already unsubscribed\n            }\n\n            let exist = false;\n            for (let i = this.subscriptions[key].length - 1; i >= 0; i--) {\n                if (this.subscriptions[key][i] !== listener) {\n                    continue;\n                }\n\n                exist = true; // has at least one matching listener\n                delete this.subscriptions[key][i]; // removes the function reference\n                this.subscriptions[key].splice(i, 1); // reindex the array\n                this.eventSource?.removeEventListener(key, listener);\n            }\n            if (!exist) {\n                continue;\n            }\n\n            // remove the key from the subscriptions list if there are no other listeners\n            if (!this.subscriptions[key].length) {\n                delete this.subscriptions[key];\n            }\n\n            // mark for subscriptions change submit if there are no other listeners\n            if (!needToSubmit && !this.hasSubscriptionListeners(key)) {\n                needToSubmit = true;\n            }\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (needToSubmit) {\n            await this.submitSubscriptions();\n        }\n    }\n\n    private hasSubscriptionListeners(keyToCheck?: string): boolean {\n        this.subscriptions = this.subscriptions || {};\n\n        // check the specified key\n        if (keyToCheck) {\n            return !!this.subscriptions[keyToCheck]?.length;\n        }\n\n        // check for at least one non-empty subscription\n        for (let key in this.subscriptions) {\n            if (!!this.subscriptions[key]?.length) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private async submitSubscriptions(): Promise<void> {\n        if (!this.clientId) {\n            return; // no client/subscriber\n        }\n\n        // optimistic update\n        this.addAllSubscriptionListeners();\n\n        this.lastSentSubscriptions = this.getNonEmptySubscriptionKeys();\n\n        return this.client\n            .send(\"/api/realtime\", {\n                method: \"POST\",\n                body: {\n                    clientId: this.clientId,\n                    subscriptions: this.lastSentSubscriptions,\n                },\n                requestKey: this.getSubscriptionsCancelKey(),\n            })\n            .catch((err) => {\n                if (err?.isAbort) {\n                    return; // silently ignore aborted pending requests\n                }\n                throw err;\n            });\n    }\n\n    private getSubscriptionsCancelKey(): string {\n        return \"realtime_\" + this.clientId;\n    }\n\n    private getSubscriptionsByTopic(topic: string): Subscriptions {\n        const result: Subscriptions = {};\n\n        // \"?\" so that it can be used as end delimiter for the topic\n        topic = topic.includes(\"?\") ? topic : topic + \"?\";\n\n        for (let key in this.subscriptions) {\n            if ((key + \"?\").startsWith(topic)) {\n                result[key] = this.subscriptions[key];\n            }\n        }\n\n        return result;\n    }\n\n    private getNonEmptySubscriptionKeys(): Array<string> {\n        const result: Array<string> = [];\n\n        for (let key in this.subscriptions) {\n            if (this.subscriptions[key].length) {\n                result.push(key);\n            }\n        }\n\n        return result;\n    }\n\n    private addAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        this.removeAllSubscriptionListeners();\n\n        for (let key in this.subscriptions) {\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource.addEventListener(key, listener);\n            }\n        }\n    }\n\n    private removeAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        for (let key in this.subscriptions) {\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource.removeEventListener(key, listener);\n            }\n        }\n    }\n\n    private async connect(): Promise<void> {\n        if (this.reconnectAttempts > 0) {\n            // immediately resolve the promise to avoid indefinitely\n            // blocking the client during reconnection\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.pendingConnects.push({ resolve, reject });\n\n            if (this.pendingConnects.length > 1) {\n                // all promises will be resolved once the connection is established\n                return;\n            }\n\n            this.initConnect();\n        });\n    }\n\n    private initConnect() {\n        this.disconnect(true);\n\n        // wait up to 15s for connect\n        clearTimeout(this.connectTimeoutId);\n        this.connectTimeoutId = setTimeout(() => {\n            this.connectErrorHandler(new Error(\"EventSource connect took too long.\"));\n        }, this.maxConnectTimeout);\n\n        this.eventSource = new EventSource(this.client.buildURL(\"/api/realtime\"));\n\n        this.eventSource.onerror = (_) => {\n            this.connectErrorHandler(\n                new Error(\"Failed to establish realtime connection.\"),\n            );\n        };\n\n        this.eventSource.addEventListener(\"PB_CONNECT\", (e) => {\n            const msgEvent = e as MessageEvent;\n            this.clientId = msgEvent?.lastEventId;\n\n            this.submitSubscriptions()\n                .then(async () => {\n                    let retries = 3;\n                    while (this.hasUnsentSubscriptions() && retries > 0) {\n                        retries--;\n                        // resubscribe to ensure that the latest topics are submitted\n                        //\n                        // This is needed because missed topics could happen on reconnect\n                        // if after the pending sent `submitSubscriptions()` call another `subscribe()`\n                        // was made before the submit was able to complete.\n                        await this.submitSubscriptions();\n                    }\n                })\n                .then(() => {\n                    for (let p of this.pendingConnects) {\n                        p.resolve();\n                    }\n\n                    // reset connect meta\n                    this.pendingConnects = [];\n                    this.reconnectAttempts = 0;\n                    clearTimeout(this.reconnectTimeoutId);\n                    clearTimeout(this.connectTimeoutId);\n\n                    // propagate the PB_CONNECT event\n                    const connectSubs = this.getSubscriptionsByTopic(\"PB_CONNECT\");\n                    for (let key in connectSubs) {\n                        for (let listener of connectSubs[key]) {\n                            listener(e);\n                        }\n                    }\n                })\n                .catch((err) => {\n                    this.clientId = \"\";\n                    this.connectErrorHandler(err);\n                });\n        });\n    }\n\n    private hasUnsentSubscriptions(): boolean {\n        const latestTopics = this.getNonEmptySubscriptionKeys();\n        if (latestTopics.length != this.lastSentSubscriptions.length) {\n            return true;\n        }\n\n        for (const t of latestTopics) {\n            if (!this.lastSentSubscriptions.includes(t)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private connectErrorHandler(err: any) {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n\n        if (\n            // wasn't previously connected -> direct reject\n            (!this.clientId && !this.reconnectAttempts) ||\n            // was previously connected but the max reconnection limit has been reached\n            this.reconnectAttempts > this.maxReconnectAttempts\n        ) {\n            for (let p of this.pendingConnects) {\n                p.reject(new ClientResponseError(err));\n            }\n            this.pendingConnects = [];\n            this.disconnect();\n            return;\n        }\n\n        // otherwise -> reconnect in the background\n        this.disconnect(true);\n        const timeout =\n            this.predefinedReconnectIntervals[this.reconnectAttempts] ||\n            this.predefinedReconnectIntervals[\n                this.predefinedReconnectIntervals.length - 1\n            ];\n        this.reconnectAttempts++;\n        this.reconnectTimeoutId = setTimeout(() => {\n            this.initConnect();\n        }, timeout);\n    }\n\n    private disconnect(fromReconnect = false): void {\n        if (this.clientId && this.onDisconnect) {\n            this.onDisconnect(Object.keys(this.subscriptions));\n        }\n\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n        this.removeAllSubscriptionListeners();\n        this.client.cancelRequest(this.getSubscriptionsCancelKey());\n        this.eventSource?.close();\n        this.eventSource = null;\n        this.clientId = \"\";\n\n        if (!fromReconnect) {\n            this.reconnectAttempts = 0;\n\n            // resolve any remaining connect promises\n            //\n            // this is done to avoid unnecessary throwing errors in case\n            // unsubscribe is called before the pending connect promises complete\n            // (see https://github.com/pocketbase/pocketbase/discussions/2897#discussioncomment-6423818)\n            for (let p of this.pendingConnects) {\n                p.resolve();\n            }\n            this.pendingConnects = [];\n        }\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { ClientResponseError } from \"@/ClientResponseError\";\nimport { ListResult } from \"@/tools/dtos\";\nimport { CommonOptions, ListOptions, FullListOptions } from \"@/tools/options\";\n\nexport abstract class CrudService<M> extends BaseService {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/admins').\n     */\n    abstract get baseCrudPath(): string;\n\n    /**\n     * Response data decoder.\n     */\n    decode<T = M>(data: { [key: string]: any }): T {\n        return data as T;\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once\n     * (by default 500 items per request; to change it set the `batch` query param).\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFullList<T = M>(options?: FullListOptions): Promise<Array<T>>;\n\n    /**\n     * Legacy version of getFullList with explicitly specified batch size.\n     */\n    async getFullList<T = M>(batch?: number, options?: ListOptions): Promise<Array<T>>;\n\n    async getFullList<T = M>(\n        batchOrqueryParams?: number | FullListOptions,\n        options?: ListOptions,\n    ): Promise<Array<T>> {\n        if (typeof batchOrqueryParams == \"number\") {\n            return this._getFullList<T>(batchOrqueryParams, options);\n        }\n\n        options = Object.assign({}, batchOrqueryParams, options);\n\n        let batch = 500;\n        if (options.batch) {\n            batch = options.batch;\n            delete options.batch;\n        }\n\n        return this._getFullList<T>(batch, options);\n    }\n\n    /**\n     * Returns paginated items list.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getList<T = M>(\n        page = 1,\n        perPage = 30,\n        options?: ListOptions,\n    ): Promise<ListResult<T>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        options.query = Object.assign(\n            {\n                page: page,\n                perPage: perPage,\n            },\n            options.query,\n        );\n\n        return this.client.send(this.baseCrudPath, options).then((responseData: any) => {\n            responseData.items =\n                responseData.items?.map((item: any) => {\n                    return this.decode<T>(item);\n                }) || [];\n\n            return responseData;\n        });\n    }\n\n    /**\n     * Returns the first found item by the specified filter.\n     *\n     * Internally it calls `getList(1, 1, { filter, skipTotal })` and\n     * returns the first found item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * For consistency with `getOne`, this method will throw a 404\n     * ClientResponseError if no item was found.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFirstListItem<T = M>(filter: string, options?: CommonOptions): Promise<T> {\n        options = Object.assign(\n            {\n                requestKey: \"one_by_filter_\" + this.baseCrudPath + \"_\" + filter,\n            },\n            options,\n        );\n\n        options.query = Object.assign(\n            {\n                filter: filter,\n                skipTotal: 1,\n            },\n            options.query,\n        );\n\n        return this.getList<T>(1, 1, options).then((result) => {\n            if (!result?.items?.length) {\n                throw new ClientResponseError({\n                    status: 404,\n                    response: {\n                        code: 404,\n                        message: \"The requested resource wasn't found.\",\n                        data: {},\n                    },\n                });\n            }\n\n            return result.items[0];\n        });\n    }\n\n    /**\n     * Returns single item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * If `id` is empty it will throw a 404 error.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getOne<T = M>(id: string, options?: CommonOptions): Promise<T> {\n        if (!id) {\n            throw new ClientResponseError({\n                url: this.client.buildURL(this.baseCrudPath + \"/\"),\n                status: 404,\n                response: {\n                    code: 404,\n                    message: \"Missing required record id.\",\n                    data: {},\n                },\n            });\n        }\n\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Creates a new item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async create<T = M>(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath, options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Updates an existing item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async update<T = M>(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign(\n            {\n                method: \"PATCH\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     *\n     * @throws {ClientResponseError}\n     */\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then(() => true);\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    protected _getFullList<T = M>(\n        batchSize = 500,\n        options?: ListOptions,\n    ): Promise<Array<T>> {\n        options = options || {};\n        options.query = Object.assign(\n            {\n                skipTotal: 1,\n            },\n            options.query,\n        );\n\n        let result: Array<T> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this.getList(page, batchSize || 500, options).then((list) => {\n                const castedList = list as any as ListResult<T>;\n                const items = castedList.items;\n\n                result = result.concat(items);\n\n                if (items.length == list.perPage) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        };\n\n        return request(1);\n    }\n}\n","import { SendOptions } from \"@/tools/options\";\n\nexport function normalizeLegacyOptionsArgs(\n    legacyWarn: string,\n    baseOptions: SendOptions,\n    bodyOrOptions?: any,\n    query?: any,\n): SendOptions {\n    const hasBodyOrOptions = typeof bodyOrOptions !== \"undefined\";\n    const hasQuery = typeof query !== \"undefined\";\n\n    if (!hasQuery && !hasBodyOrOptions) {\n        return baseOptions;\n    }\n\n    if (hasQuery) {\n        console.warn(legacyWarn);\n        baseOptions.body = Object.assign({}, baseOptions.body, bodyOrOptions);\n        baseOptions.query = Object.assign({}, baseOptions.query, query);\n\n        return baseOptions;\n    }\n\n    return Object.assign(baseOptions, bodyOrOptions);\n}\n","import Client from \"@/Client\";\nimport { isTokenExpired } from \"@/tools/jwt\";\n\n// reset previous auto refresh registrations\nexport function resetAutoRefresh(client: Client) {\n    (client as any)._resetAutoRefresh?.();\n}\n\nexport function registerAutoRefresh(\n    client: Client,\n    threshold: number,\n    refreshFunc: () => Promise<any>,\n    reauthenticateFunc: () => Promise<any>,\n) {\n    resetAutoRefresh(client);\n\n    const oldBeforeSend = client.beforeSend;\n    const oldModel = client.authStore.record;\n\n    // unset the auto refresh in case the auth store was cleared\n    // OR a new model was authenticated\n    const unsubStoreChange = client.authStore.onChange((newToken, model) => {\n        if (\n            !newToken ||\n            model?.id != oldModel?.id ||\n            ((model?.collectionId || oldModel?.collectionId) &&\n                model?.collectionId != oldModel?.collectionId)\n        ) {\n            resetAutoRefresh(client);\n        }\n    });\n\n    // initialize a reset function and attach it dynamically to the client\n    (client as any)._resetAutoRefresh = function () {\n        unsubStoreChange();\n        client.beforeSend = oldBeforeSend;\n        delete (client as any)._resetAutoRefresh;\n    };\n\n    client.beforeSend = async (url, sendOptions) => {\n        const oldToken = client.authStore.token;\n\n        if (sendOptions.query?.autoRefresh) {\n            return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\n        }\n\n        let isValid = client.authStore.isValid;\n        if (\n            // is loosely valid\n            isValid &&\n            // but it is going to expire in the next \"threshold\" seconds\n            isTokenExpired(client.authStore.token, threshold)\n        ) {\n            try {\n                await refreshFunc();\n            } catch (_) {\n                isValid = false;\n            }\n        }\n\n        // still invalid -> reauthenticate\n        if (!isValid) {\n            await reauthenticateFunc();\n        }\n\n        // the request wasn't sent with a custom token\n        const headers = sendOptions.headers || {};\n        for (let key in headers) {\n            if (\n                key.toLowerCase() == \"authorization\" &&\n                // the request wasn't sent with a custom token\n                oldToken == headers[key] &&\n                client.authStore.token\n            ) {\n                // set the latest store token\n                headers[key] = client.authStore.token;\n                break;\n            }\n        }\n        sendOptions.headers = headers;\n\n        return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\n    };\n}\n","import Client from \"@/Client\";\nimport { ClientResponseError } from \"@/ClientResponseError\";\nimport { RealtimeService, UnsubscribeFunc } from \"@/services/RealtimeService\";\nimport { BaseAuthStore } from \"@/stores/BaseAuthStore\";\nimport { CrudService } from \"@/services/CrudService\";\nimport { ListResult, RecordModel } from \"@/tools/dtos\";\nimport { normalizeLegacyOptionsArgs } from \"@/tools/legacy\";\nimport {\n    CommonOptions,\n    RecordFullListOptions,\n    RecordListOptions,\n    RecordOptions,\n    SendOptions,\n    RecordSubscribeOptions,\n} from \"@/tools/options\";\nimport { getTokenPayload } from \"@/tools/jwt\";\nimport { registerAutoRefresh, resetAutoRefresh } from \"@/tools/refresh\";\n\nexport interface RecordAuthResponse<T = RecordModel> {\n    /**\n     * The signed PocketBase auth record.\n     */\n    record: T;\n\n    /**\n     * The PocketBase record auth token.\n     *\n     * If you are looking for the OAuth2 access and refresh tokens\n     * they are available under the `meta.accessToken` and `meta.refreshToken` props.\n     */\n    token: string;\n\n    /**\n     * Auth meta data usually filled when OAuth2 is used.\n     */\n    meta?: { [key: string]: any };\n}\n\nexport interface AuthProviderInfo {\n    name: string;\n    displayName: string;\n    state: string;\n    authURL: string;\n    codeVerifier: string;\n    codeChallenge: string;\n    codeChallengeMethod: string;\n}\n\nexport interface AuthMethodsList {\n    mfa: {\n        enabled: boolean;\n        duration: number;\n    };\n    otp: {\n        enabled: boolean;\n        duration: number;\n    };\n    password: {\n        enabled: boolean;\n        identityFields: Array<string>;\n    };\n    oauth2: {\n        enabled: boolean;\n        providers: Array<AuthProviderInfo>;\n    };\n}\n\nexport interface RecordSubscription<T = RecordModel> {\n    action: string; // eg. create, update, delete\n    record: T;\n}\n\nexport type OAuth2UrlCallback = (url: string) => void | Promise<void>;\n\nexport interface OAuth2AuthConfig extends SendOptions {\n    // the name of the OAuth2 provider (eg. \"google\")\n    provider: string;\n\n    // custom scopes to overwrite the default ones\n    scopes?: Array<string>;\n\n    // optional record create data\n    createData?: { [key: string]: any };\n\n    // optional callback that is triggered after the OAuth2 sign-in/sign-up url generation\n    urlCallback?: OAuth2UrlCallback;\n\n    // optional query params to send with the PocketBase auth request (eg. fields, expand, etc.)\n    query?: RecordOptions;\n}\n\nexport interface OTPResponse {\n    otpId: string;\n}\n\nexport class RecordService<M = RecordModel> extends CrudService<M> {\n    readonly collectionIdOrName: string;\n\n    constructor(client: Client, collectionIdOrName: string) {\n        super(client);\n\n        this.collectionIdOrName = collectionIdOrName;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return this.baseCollectionPath + \"/records\";\n    }\n\n    /**\n     * Returns the current collection service base path.\n     */\n    get baseCollectionPath(): string {\n        return \"/api/collections/\" + encodeURIComponent(this.collectionIdOrName);\n    }\n\n    /**\n     * Returns whether the current service collection is superusers.\n     */\n    get isSuperusers(): boolean {\n        return (\n            this.collectionIdOrName == \"_superusers\" ||\n            this.collectionIdOrName == \"_pbc_2773867675\"\n        );\n    }\n\n    // ---------------------------------------------------------------\n    // Realtime handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Subscribe to realtime changes to the specified topic (\"*\" or record id).\n     *\n     * If `topic` is the wildcard \"*\", then this method will subscribe to\n     * any record changes in the collection.\n     *\n     * If `topic` is a record id, then this method will subscribe only\n     * to changes of the specified record id.\n     *\n     * It's OK to subscribe multiple times to the same topic.\n     * You can use the returned `UnsubscribeFunc` to remove only a single subscription.\n     * Or use `unsubscribe(topic)` if you want to remove all subscriptions attached to the topic.\n     */\n    async subscribe<T = M>(\n        topic: string,\n        callback: (data: RecordSubscription<T>) => void,\n        options?: RecordSubscribeOptions,\n    ): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error(\"Missing topic.\");\n        }\n\n        if (!callback) {\n            throw new Error(\"Missing subscription callback.\");\n        }\n\n        return this.client.realtime.subscribe(\n            this.collectionIdOrName + \"/\" + topic,\n            callback,\n            options,\n        );\n    }\n\n    /**\n     * Unsubscribe from all subscriptions of the specified topic\n     * (\"*\" or record id).\n     *\n     * If `topic` is not set, then this method will unsubscribe from\n     * all subscriptions associated to the current collection.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        // unsubscribe from the specified topic\n        if (topic) {\n            return this.client.realtime.unsubscribe(\n                this.collectionIdOrName + \"/\" + topic,\n            );\n        }\n\n        // unsubscribe from everything related to the collection\n        return this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Crud handers\n    // ---------------------------------------------------------------\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(options?: RecordFullListOptions): Promise<Array<T>>;\n\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(\n        batch?: number,\n        options?: RecordListOptions,\n    ): Promise<Array<T>>;\n\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(\n        batchOrOptions?: number | RecordFullListOptions,\n        options?: RecordListOptions,\n    ): Promise<Array<T>> {\n        if (typeof batchOrOptions == \"number\") {\n            return super.getFullList<T>(batchOrOptions, options);\n        }\n\n        const params = Object.assign({}, batchOrOptions, options);\n\n        return super.getFullList<T>(params);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getList<T = M>(\n        page = 1,\n        perPage = 30,\n        options?: RecordListOptions,\n    ): Promise<ListResult<T>> {\n        return super.getList<T>(page, perPage, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getFirstListItem<T = M>(\n        filter: string,\n        options?: RecordListOptions,\n    ): Promise<T> {\n        return super.getFirstListItem<T>(filter, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getOne<T = M>(id: string, options?: RecordOptions): Promise<T> {\n        return super.getOne<T>(id, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async create<T = M>(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): Promise<T> {\n        return super.create<T>(bodyParams, options);\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.record` matches with the updated id, then\n     * on success the `client.authStore.record` will be updated with the new response record fields.\n     */\n    async update<T = M>(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): Promise<T> {\n        return super.update<RecordModel>(id, bodyParams, options).then((item) => {\n            if (\n                // is record auth\n                this.client.authStore.record?.id === item?.id &&\n                (this.client.authStore.record?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.record?.collectionName ===\n                        this.collectionIdOrName)\n            ) {\n                let authExpand = Object.assign({}, this.client.authStore.record.expand);\n                let authRecord = Object.assign({}, this.client.authStore.record, item);\n                if (authExpand) {\n                    // for now \"merge\" only top-level expand\n                    authRecord.expand = Object.assign(authExpand, item.expand);\n                }\n\n                this.client.authStore.save(this.client.authStore.token, authRecord);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.record` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\n        return super.delete(id, options).then((success) => {\n            if (\n                success &&\n                // is record auth\n                this.client.authStore.record?.id === id &&\n                (this.client.authStore.record?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.record?.collectionName ===\n                        this.collectionIdOrName)\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful collection authorization response.\n     */\n    protected authResponse<T = M>(responseData: any): RecordAuthResponse<T> {\n        const record = this.decode(responseData?.record || {});\n\n        this.client.authStore.save(responseData?.token, record as any);\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            token: responseData?.token || \"\",\n            record: record as any as T,\n        });\n    }\n\n    /**\n     * Returns all available collection auth methods.\n     *\n     * @throws {ClientResponseError}\n     */\n    async listAuthMethods(options?: CommonOptions): Promise<AuthMethodsList> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n                // @todo remove after deleting the pre v0.23 API response fields\n                fields: \"mfa,otp,password,oauth2\",\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCollectionPath + \"/auth-methods\", options);\n    }\n\n    /**\n     * Authenticate a single auth collection record via its username/email and password.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithPassword<T = M>(\n        usernameOrEmail: string,\n        password: string,\n        options?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    identity: usernameOrEmail,\n                    password: password,\n                },\n            },\n            options,\n        );\n\n        // note: consider to deprecate\n        let autoRefreshThreshold;\n        if (this.isSuperusers) {\n            autoRefreshThreshold = options.autoRefreshThreshold;\n            delete options.autoRefreshThreshold;\n            if (!options.autoRefresh) {\n                resetAutoRefresh(this.client);\n            }\n        }\n\n        let authData = await this.client.send(\n            this.baseCollectionPath + \"/auth-with-password\",\n            options,\n        );\n\n        authData = this.authResponse<T>(authData);\n\n        if (autoRefreshThreshold && this.isSuperusers) {\n            registerAutoRefresh(\n                this.client,\n                autoRefreshThreshold,\n                () => this.authRefresh({ autoRefresh: true }),\n                () =>\n                    this.authWithPassword<T>(\n                        usernameOrEmail,\n                        password,\n                        Object.assign({ autoRefresh: true }, options),\n                    ),\n            );\n        }\n\n        return authData;\n    }\n\n    /**\n     * Authenticate a single auth collection record with OAuth2 code.\n     *\n     * If you don't have an OAuth2 code you may also want to check `authWithOAuth2` method.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectURL: string,\n        createData?: { [key: string]: any },\n        options?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * @deprecated\n     * Consider using authWithOAuth2Code(provider, code, codeVerifier, redirectURL, createdData, options?).\n     */\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectURL: string,\n        createData?: { [key: string]: any },\n        body?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>>;\n\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectURL: string,\n        createData?: { [key: string]: any },\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                provider: provider,\n                code: code,\n                codeVerifier: codeVerifier,\n                redirectURL: redirectURL,\n                createData: createData,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authWithOAuth2Code(provider, code, codeVerifier, redirectURL, createData?, body?, query?) is deprecated. Consider replacing it with authWithOAuth2Code(provider, code, codeVerifier, redirectURL, createData?, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-with-oauth2\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * @deprecated This form of authWithOAuth2 is deprecated.\n     *\n     * Please use `authWithOAuth2Code()` OR its simplified realtime version\n     * as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\n     */\n    async authWithOAuth2<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectURL: string,\n        createData?: { [key: string]: any },\n        bodyParams?: { [key: string]: any },\n        queryParams?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * Authenticate a single auth collection record with OAuth2\n     * **without custom redirects, deeplinks or even page reload**.\n     *\n     * This method initializes a one-off realtime subscription and will\n     * open a popup window with the OAuth2 vendor page to authenticate.\n     * Once the external OAuth2 sign-in/sign-up flow is completed, the popup\n     * window will be automatically closed and the OAuth2 data sent back\n     * to the user through the previously established realtime connection.\n     *\n     * You can specify an optional `urlCallback` prop to customize\n     * the default url `window.open` behavior.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     *\n     * Example:\n     *\n     * ```js\n     * const authData = await pb.collection(\"users\").authWithOAuth2({\n     *     provider: \"google\",\n     * })\n     * ```\n     *\n     * Note1: When creating the OAuth2 app in the provider dashboard\n     * you have to configure `https://yourdomain.com/api/oauth2-redirect`\n     * as redirect URL.\n     *\n     * Note2: Safari may block the default `urlCallback` popup because\n     * it doesn't allow `window.open` calls as part of an `async` click functions.\n     * To workaround this you can either change your click handler to not be marked as `async`\n     * OR manually call `window.open` before your `async` function and use the\n     * window reference in your own custom `urlCallback` (see https://github.com/pocketbase/pocketbase/discussions/2429#discussioncomment-5943061).\n     * For example:\n     * ```js\n     * <button id=\"btn\">Login with Gitlab</button>\n     * ...\n     * document.getElementById(\"btn\").addEventListener(\"click\", () => {\n     *     pb.collection(\"users\").authWithOAuth2({\n     *         provider: \"gitlab\",\n     *     }).then((authData) => {\n     *         console.log(authData)\n     *     }).catch((err) => {\n     *         console.log(err, err.originalError);\n     *     });\n     * })\n     * ```\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithOAuth2<T = M>(\n        options: OAuth2AuthConfig,\n    ): Promise<RecordAuthResponse<T>>;\n\n    authWithOAuth2<T = M>(...args: any): Promise<RecordAuthResponse<T>> {\n        // fallback to legacy format\n        if (args.length > 1 || typeof args?.[0] === \"string\") {\n            console.warn(\n                \"PocketBase: This form of authWithOAuth2() is deprecated and may get removed in the future. Please replace with authWithOAuth2Code() OR use the authWithOAuth2() realtime form as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\",\n            );\n            return this.authWithOAuth2Code<T>(\n                args?.[0] || \"\",\n                args?.[1] || \"\",\n                args?.[2] || \"\",\n                args?.[3] || \"\",\n                args?.[4] || {},\n                args?.[5] || {},\n                args?.[6] || {},\n            );\n        }\n\n        const config = args?.[0] || {};\n\n        // open a new popup window in case config.urlCallback is not set\n        //\n        // note: it is opened before any async calls due to Safari restrictions\n        // (see https://github.com/pocketbase/pocketbase/discussions/2429#discussioncomment-5943061)\n        let eagerDefaultPopup: Window | null = null;\n        if (!config.urlCallback) {\n            eagerDefaultPopup = openBrowserPopup(undefined);\n        }\n\n        // initialize a one-off realtime service\n        const realtime = new RealtimeService(this.client);\n\n        function cleanup() {\n            eagerDefaultPopup?.close();\n            realtime.unsubscribe();\n        }\n\n        const requestKeyOptions: SendOptions = {};\n        const requestKey = config.requestKey;\n        if (requestKey) {\n            requestKeyOptions.requestKey = requestKey;\n        }\n\n        return this.listAuthMethods(requestKeyOptions)\n            .then((authMethods) => {\n                const provider = authMethods.oauth2.providers.find(\n                    (p) => p.name === config.provider,\n                );\n                if (!provider) {\n                    throw new ClientResponseError(\n                        new Error(`Missing or invalid provider \"${config.provider}\".`),\n                    );\n                }\n\n                const redirectURL = this.client.buildURL(\"/api/oauth2-redirect\");\n\n                // find the AbortController associated with the current request key (if any)\n                const cancelController = requestKey\n                    ? this.client[\"cancelControllers\"]?.[requestKey]\n                    : undefined;\n                if (cancelController) {\n                    cancelController.signal.onabort = () => {\n                        cleanup();\n                    };\n                }\n\n                return new Promise(async (resolve, reject) => {\n                    try {\n                        await realtime.subscribe(\"@oauth2\", async (e) => {\n                            const oldState = realtime.clientId;\n\n                            try {\n                                if (!e.state || oldState !== e.state) {\n                                    throw new Error(\"State parameters don't match.\");\n                                }\n\n                                if (e.error || !e.code) {\n                                    throw new Error(\n                                        \"OAuth2 redirect error or missing code: \" +\n                                            e.error,\n                                    );\n                                }\n\n                                // clear the non SendOptions props\n                                const options = Object.assign({}, config);\n                                delete options.provider;\n                                delete options.scopes;\n                                delete options.createData;\n                                delete options.urlCallback;\n\n                                // reset the cancelController listener as it will be triggered by the next api call\n                                if (cancelController?.signal?.onabort) {\n                                    cancelController.signal.onabort = null;\n                                }\n\n                                const authData = await this.authWithOAuth2Code<T>(\n                                    provider.name,\n                                    e.code,\n                                    provider.codeVerifier,\n                                    redirectURL,\n                                    config.createData,\n                                    options,\n                                );\n\n                                resolve(authData);\n                            } catch (err) {\n                                reject(new ClientResponseError(err));\n                            }\n\n                            cleanup();\n                        });\n\n                        const replacements: { [key: string]: any } = {\n                            state: realtime.clientId,\n                        };\n                        if (config.scopes?.length) {\n                            replacements[\"scope\"] = config.scopes.join(\" \");\n                        }\n\n                        const url = this._replaceQueryParams(\n                            provider.authURL + redirectURL,\n                            replacements,\n                        );\n\n                        let urlCallback =\n                            config.urlCallback ||\n                            function (url: string) {\n                                if (eagerDefaultPopup) {\n                                    eagerDefaultPopup.location.href = url;\n                                } else {\n                                    // it could have been blocked due to its empty initial url,\n                                    // try again...\n                                    eagerDefaultPopup = openBrowserPopup(url);\n                                }\n                            };\n\n                        await urlCallback(url);\n                    } catch (err) {\n                        cleanup();\n                        reject(new ClientResponseError(err));\n                    }\n                });\n            })\n            .catch((err) => {\n                cleanup();\n                throw err; // rethrow\n            }) as Promise<RecordAuthResponse<T>>;\n    }\n\n    /**\n     * Refreshes the current authenticated record instance and\n     * returns a new token and record data.\n     *\n     * On success this method also automatically updates the client's AuthStore.\n     *\n     * @throws {ClientResponseError}\n     */\n    async authRefresh<T = M>(options?: RecordOptions): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * @deprecated\n     * Consider using authRefresh(options?).\n     */\n    async authRefresh<T = M>(body?: any, query?: any): Promise<RecordAuthResponse<T>>;\n\n    async authRefresh<T = M>(\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            method: \"POST\",\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-refresh\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Sends auth record password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestPasswordReset(email: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestPasswordReset(email, options?).\n     */\n    async requestPasswordReset(email: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestPasswordReset(\n        email: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                email: email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-password-reset\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmPasswordReset(passwordResetToken, password, passwordConfirm, options?).\n     */\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: passwordResetToken,\n                password: password,\n                passwordConfirm: passwordConfirm,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmPasswordReset(token, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(token, password, passwordConfirm, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-password-reset\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends auth record verification email request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestVerification(email: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestVerification(email, options?).\n     */\n    async requestVerification(email: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestVerification(\n        email: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                email: email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestVerification(email, body?, query?) is deprecated. Consider replacing it with requestVerification(email, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-verification\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record email verification request.\n     *\n     * If the current `client.authStore.record` matches with the auth record from the token,\n     * then on success the `client.authStore.record.verified` will be updated to `true`.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmVerification(\n        verificationToken: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmVerification(verificationToken, options?).\n     */\n    async confirmVerification(\n        verificationToken: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmVerification(\n        verificationToken: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: verificationToken,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmVerification(token, body?, query?) is deprecated. Consider replacing it with confirmVerification(token, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-verification\", options)\n            .then(() => {\n                // on success manually update the current auth record verified state\n                const payload = getTokenPayload(verificationToken);\n                const model = this.client.authStore.record;\n                if (\n                    model &&\n                    !model.verified &&\n                    model.id === payload.id &&\n                    model.collectionId === payload.collectionId\n                ) {\n                    model.verified = true;\n                    this.client.authStore.save(this.client.authStore.token, model);\n                }\n\n                return true;\n            });\n    }\n\n    /**\n     * Sends an email change request to the authenticated record model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestEmailChange(newEmail: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestEmailChange(newEmail, options?).\n     */\n    async requestEmailChange(newEmail: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestEmailChange(\n        newEmail: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                newEmail: newEmail,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestEmailChange(newEmail, body?, query?) is deprecated. Consider replacing it with requestEmailChange(newEmail, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-email-change\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record's new email address.\n     *\n     * If the current `client.authStore.record` matches with the auth record from the token,\n     * then on success the `client.authStore` will be cleared.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmEmailChange(emailChangeToken, password, options?).\n     */\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: emailChangeToken,\n                password: password,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmEmailChange(token, password, body?, query?) is deprecated. Consider replacing it with confirmEmailChange(token, password, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-email-change\", options)\n            .then(() => {\n                const payload = getTokenPayload(emailChangeToken);\n                const model = this.client.authStore.record;\n                if (\n                    model &&\n                    model.id === payload.id &&\n                    model.collectionId === payload.collectionId\n                ) {\n                    this.client.authStore.clear();\n                }\n\n                return true;\n            });\n    }\n\n    /**\n     * @deprecated use collection(\"_externalAuths\").*\n     *\n     * Lists all linked external auth providers for the specified auth record.\n     *\n     * @throws {ClientResponseError}\n     */\n    async listExternalAuths(\n        recordId: string,\n        options?: CommonOptions,\n    ): Promise<Array<RecordModel>> {\n        return this.client.collection(\"_externalAuths\").getFullList(\n            Object.assign({}, options, {\n                filter: this.client.filter(\"recordRef = {:id}\", { id: recordId }),\n            }),\n        );\n    }\n\n    /**\n     * @deprecated use collection(\"_externalAuths\").*\n     *\n     * Unlink a single external auth provider from the specified auth record.\n     *\n     * @throws {ClientResponseError}\n     */\n    async unlinkExternalAuth(\n        recordId: string,\n        provider: string,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        const ea = await this.client.collection(\"_externalAuths\").getFirstListItem(\n            this.client.filter(\"recordRef = {:recordId} && provider = {:provider}\", {\n                recordId,\n                provider,\n            }),\n        );\n\n        return this.client\n            .collection(\"_externalAuths\")\n            .delete(ea.id, options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends auth record OTP to the provided email.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestOTP(email: string, options?: CommonOptions): Promise<OTPResponse> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: { email: email },\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCollectionPath + \"/request-otp\", options);\n    }\n\n    /**\n     * Authenticate a single auth collection record via OTP.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithOTP<T = M>(\n        otpId: string,\n        password: string,\n        options?: CommonOptions,\n    ): Promise<RecordAuthResponse<T>> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: { otpId, password },\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-with-otp\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Impersonate authenticates with the specified recordId and\n     * returns a new client with the received auth token in a memory store.\n     *\n     * If `duration` is 0 the generated auth token will fallback\n     * to the default collection auth token duration.\n     *\n     * This action currently requires superusers privileges.\n     *\n     * @throws {ClientResponseError}\n     */\n    async impersonate(\n        recordId: string,\n        duration: number,\n        options?: CommonOptions,\n    ): Promise<Client> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: { duration: duration },\n            },\n            options,\n        );\n        options.headers = options.headers || {};\n        if (!options.headers.Authorization) {\n            options.headers.Authorization = this.client.authStore.token;\n        }\n\n        // create a new client loaded with the impersonated auth state\n        // ---\n        const client = new Client(\n            this.client.baseURL,\n            new BaseAuthStore(),\n            this.client.lang,\n        );\n\n        const authData = await client.send(\n            this.baseCollectionPath + \"/impersonate/\" + encodeURIComponent(recordId),\n            options,\n        );\n\n        client.authStore.save(authData?.token, this.decode(authData?.record || {}));\n        // ---\n\n        return client;\n    }\n\n    // ---------------------------------------------------------------\n\n    // very rudimentary url query params replacement because at the moment\n    // URL (and URLSearchParams) doesn't seem to be fully supported in React Native\n    //\n    // note: for details behind some of the decode/encode parsing check https://unixpapa.com/js/querystring.html\n    private _replaceQueryParams(\n        url: string,\n        replacements: { [key: string]: any } = {},\n    ): string {\n        let urlPath = url;\n        let query = \"\";\n\n        const queryIndex = url.indexOf(\"?\");\n        if (queryIndex >= 0) {\n            urlPath = url.substring(0, url.indexOf(\"?\"));\n            query = url.substring(url.indexOf(\"?\") + 1);\n        }\n\n        const parsedParams: { [key: string]: string } = {};\n\n        // parse the query parameters\n        const rawParams = query.split(\"&\");\n        for (const param of rawParams) {\n            if (param == \"\") {\n                continue;\n            }\n\n            const pair = param.split(\"=\");\n            parsedParams[decodeURIComponent(pair[0].replace(/\\+/g, \" \"))] =\n                decodeURIComponent((pair[1] || \"\").replace(/\\+/g, \" \"));\n        }\n\n        // apply the replacements\n        for (let key in replacements) {\n            if (!replacements.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (replacements[key] == null) {\n                delete parsedParams[key];\n            } else {\n                parsedParams[key] = replacements[key];\n            }\n        }\n\n        // construct back the full query string\n        query = \"\";\n        for (let key in parsedParams) {\n            if (!parsedParams.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (query != \"\") {\n                query += \"&\";\n            }\n\n            query +=\n                encodeURIComponent(key.replace(/%20/g, \"+\")) +\n                \"=\" +\n                encodeURIComponent(parsedParams[key].replace(/%20/g, \"+\"));\n        }\n\n        return query != \"\" ? urlPath + \"?\" + query : urlPath;\n    }\n}\n\nfunction openBrowserPopup(url?: string): Window | null {\n    if (typeof window === \"undefined\" || !window?.open) {\n        throw new ClientResponseError(\n            new Error(\n                `Not in a browser context - please pass a custom urlCallback function.`,\n            ),\n        );\n    }\n\n    let width = 1024;\n    let height = 768;\n\n    let windowWidth = window.innerWidth;\n    let windowHeight = window.innerHeight;\n\n    // normalize window size\n    width = width > windowWidth ? windowWidth : width;\n    height = height > windowHeight ? windowHeight : height;\n\n    let left = windowWidth / 2 - width / 2;\n    let top = windowHeight / 2 - height / 2;\n\n    // note: we don't use the noopener and noreferrer attributes since\n    // for some reason browser blocks such windows then url is undefined/blank\n    return window.open(\n        url,\n        \"popup_window\",\n        \"width=\" +\n            width +\n            \",height=\" +\n            height +\n            \",top=\" +\n            top +\n            \",left=\" +\n            left +\n            \",resizable,menubar=no\",\n    );\n}\n","import { CrudService } from \"@/services/CrudService\";\nimport { CollectionModel } from \"@/tools/dtos\";\nimport { CommonOptions } from \"@/tools/options\";\n\nexport class CollectionService extends CrudService<CollectionModel> {\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return \"/api/collections\";\n    }\n\n    /**\n     * Imports the provided collections.\n     *\n     * If `deleteMissing` is `true`, all local collections and their fields,\n     * that are not present in the imported configuration, WILL BE DELETED\n     * (including their related records data)!\n     *\n     * @throws {ClientResponseError}\n     */\n    async import(\n        collections: Array<CollectionModel>,\n        deleteMissing: boolean = false,\n        options?: CommonOptions,\n    ): Promise<true> {\n        options = Object.assign(\n            {\n                method: \"PUT\",\n                body: {\n                    collections: collections,\n                    deleteMissing: deleteMissing,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCrudPath + \"/import\", options).then(() => true);\n    }\n\n    /**\n     * Returns type indexed map with scaffolded collection models\n     * populated with their default field values.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getScaffolds(\n        options?: CommonOptions,\n    ): Promise<{ [key: string]: CollectionModel }> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCrudPath + \"/meta/scaffolds\", options);\n    }\n\n    /**\n     * Deletes all records associated with the specified collection.\n     *\n     * @throws {ClientResponseError}\n     */\n    async truncate(collectionIdOrName: string, options?: CommonOptions): Promise<true> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(\n                this.baseCrudPath +\n                    \"/\" +\n                    encodeURIComponent(collectionIdOrName) +\n                    \"/truncate\",\n                options,\n            )\n            .then(() => true);\n    }\n}\n","import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseService } from \"@/services/BaseService\";\nimport { ListResult, LogModel } from \"@/tools/dtos\";\nimport { CommonOptions, ListOptions, LogStatsOptions } from \"@/tools/options\";\n\nexport interface HourlyStats {\n    total: number;\n    date: string;\n}\n\nexport class LogService extends BaseService {\n    /**\n     * Returns paginated logs list.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getList(\n        page = 1,\n        perPage = 30,\n        options?: ListOptions,\n    ): Promise<ListResult<LogModel>> {\n        options = Object.assign({ method: \"GET\" }, options);\n\n        options.query = Object.assign(\n            {\n                page: page,\n                perPage: perPage,\n            },\n            options.query,\n        );\n\n        return this.client.send(\"/api/logs\", options);\n    }\n\n    /**\n     * Returns a single log by its id.\n     *\n     * If `id` is empty it will throw a 404 error.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getOne(id: string, options?: CommonOptions): Promise<LogModel> {\n        if (!id) {\n            throw new ClientResponseError({\n                url: this.client.buildURL(\"/api/logs/\"),\n                status: 404,\n                response: {\n                    code: 404,\n                    message: \"Missing required log id.\",\n                    data: {},\n                },\n            });\n        }\n\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/logs/\" + encodeURIComponent(id), options);\n    }\n\n    /**\n     * Returns logs statistics.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getStats(options?: LogStatsOptions): Promise<Array<HourlyStats>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/logs/stats\", options);\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions } from \"@/tools/options\";\n\nexport interface HealthCheckResponse {\n    code: number;\n    message: string;\n    data: { [key: string]: any };\n}\n\nexport class HealthService extends BaseService {\n    /**\n     * Checks the health status of the api.\n     *\n     * @throws {ClientResponseError}\n     */\n    async check(options?: CommonOptions): Promise<HealthCheckResponse> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/health\", options);\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions, FileOptions } from \"@/tools/options\";\n\nexport class FileService extends BaseService {\n    /**\n     * @deprecated Please replace with `pb.files.getURL()`.\n     */\n    getUrl(\n        record: { [key: string]: any },\n        filename: string,\n        queryParams: FileOptions = {},\n    ): string {\n        console.warn(\"Please replace pb.files.getUrl() with pb.files.getURL()\");\n        return this.getURL(record, filename, queryParams);\n    }\n\n    /**\n     * Builds and returns an absolute record file url for the provided filename.\n     */\n    getURL(\n        record: { [key: string]: any },\n        filename: string,\n        queryParams: FileOptions = {},\n    ): string {\n        if (\n            !filename ||\n            !record?.id ||\n            !(record?.collectionId || record?.collectionName)\n        ) {\n            return \"\";\n        }\n\n        const parts = [];\n        parts.push(\"api\");\n        parts.push(\"files\");\n        parts.push(encodeURIComponent(record.collectionId || record.collectionName));\n        parts.push(encodeURIComponent(record.id));\n        parts.push(encodeURIComponent(filename));\n\n        let result = this.client.buildURL(parts.join(\"/\"));\n\n        if (Object.keys(queryParams).length) {\n            // normalize the download query param for consistency with the Dart sdk\n            if (queryParams.download === false) {\n                delete queryParams.download;\n            }\n\n            const params = new URLSearchParams(queryParams);\n\n            result += (result.includes(\"?\") ? \"&\" : \"?\") + params;\n        }\n\n        return result;\n    }\n\n    /**\n     * Requests a new private file access token for the current auth model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getToken(options?: CommonOptions): Promise<string> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(\"/api/files/token\", options)\n            .then((data) => data?.token || \"\");\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions } from \"@/tools/options\";\n\nexport interface BackupFileInfo {\n    key: string;\n    size: number;\n    modified: string;\n}\n\nexport class BackupService extends BaseService {\n    /**\n     * Returns list with all available backup files.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFullList(options?: CommonOptions): Promise<Array<BackupFileInfo>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups\", options);\n    }\n\n    /**\n     * Initializes a new backup.\n     *\n     * @throws {ClientResponseError}\n     */\n    async create(basename: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    name: basename,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups\", options).then(() => true);\n    }\n\n    /**\n     * Uploads an existing backup file.\n     *\n     * Example:\n     *\n     * ```js\n     * await pb.backups.upload({\n     *     file: new Blob([...]),\n     * });\n     * ```\n     *\n     * @throws {ClientResponseError}\n     */\n    async upload(\n        bodyParams: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups/upload\", options).then(() => true);\n    }\n\n    /**\n     * Deletes a single backup file.\n     *\n     * @throws {ClientResponseError}\n     */\n    async delete(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(`/api/backups/${encodeURIComponent(key)}`, options)\n            .then(() => true);\n    }\n\n    /**\n     * Initializes an app data restore from an existing backup.\n     *\n     * @throws {ClientResponseError}\n     */\n    async restore(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(`/api/backups/${encodeURIComponent(key)}/restore`, options)\n            .then(() => true);\n    }\n\n    /**\n     * @deprecated Please use `getDownloadURL()`.\n     */\n    getDownloadUrl(token: string, key: string): string {\n        console.warn(\n            \"Please replace pb.backups.getDownloadUrl() with pb.backups.getDownloadURL()\",\n        );\n        return this.getDownloadURL(token, key);\n    }\n\n    /**\n     * Builds a download url for a single existing backup using a\n     * superuser file token and the backup file key.\n     *\n     * The file token can be generated via `pb.files.getToken()`.\n     */\n    getDownloadURL(token: string, key: string): string {\n        return this.client.buildURL(\n            `/api/backups/${encodeURIComponent(key)}?token=${encodeURIComponent(token)}`,\n        );\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions } from \"@/tools/options\";\n\nexport interface CronJob {\n    id: string;\n    expression: string;\n}\n\nexport class CronService extends BaseService {\n    /**\n     * Returns list with all registered cron jobs.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFullList(options?: CommonOptions): Promise<Array<CronJob>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/crons\", options);\n    }\n\n    /**\n     * Runs the specified cron job.\n     *\n     * @throws {ClientResponseError}\n     */\n    async run(jobId: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(`/api/crons/${encodeURIComponent(jobId)}`, options)\n            .then(() => true);\n    }\n}\n","/**\n * Checks if the specified value is a file (aka. File, Blob, RN file object).\n */\nexport function isFile(val: any): boolean {\n    return (\n        (typeof Blob !== \"undefined\" && val instanceof Blob) ||\n        (typeof File !== \"undefined\" && val instanceof File) ||\n        // check for React Native file object format\n        // (see https://github.com/pocketbase/pocketbase/discussions/2002#discussioncomment-5254168)\n        (val !== null &&\n            typeof val === \"object\" &&\n            val.uri &&\n            ((typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\") ||\n                (typeof global !== \"undefined\" && (global as any).HermesInternal)))\n    );\n}\n\n/**\n * Loosely checks if the specified body is a FormData instance.\n */\nexport function isFormData(body: any): boolean {\n    return (\n        body &&\n        // we are checking the constructor name because FormData\n        // is not available natively in some environments and the\n        // polyfill(s) may not be globally accessible\n        (body.constructor.name === \"FormData\" ||\n            // fallback to global FormData instance check\n            // note: this is needed because the constructor.name could be different in case of\n            //       custom global FormData implementation, eg. React Native on Android/iOS\n            (typeof FormData !== \"undefined\" && body instanceof FormData))\n    );\n}\n\n/**\n * Checks if the submitted body object has at least one Blob/File field value.\n */\nexport function hasFileField(body: { [key: string]: any }): boolean {\n    for (const key in body) {\n        const values = Array.isArray(body[key]) ? body[key] : [body[key]];\n        for (const v of values) {\n            if (isFile(v)) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n/**\n * Converts analyzes the provided body and converts it to FormData\n * in case a plain object with File/Blob values is used.\n */\nexport function convertToFormDataIfNeeded(body: any): any {\n    if (\n        typeof FormData === \"undefined\" ||\n        typeof body === \"undefined\" ||\n        typeof body !== \"object\" ||\n        body === null ||\n        isFormData(body) ||\n        !hasFileField(body)\n    ) {\n        return body;\n    }\n\n    const form = new FormData();\n\n    for (const key in body) {\n        const val = body[key];\n\n        // skip undefined values for consistency with JSON.stringify\n        // (see https://github.com/pocketbase/pocketbase/issues/6731#issuecomment-2812382827)\n        if (typeof val === \"undefined\") {\n            continue;\n        }\n\n        if (typeof val === \"object\" && !hasFileField({ data: val })) {\n            // send json-like values as jsonPayload to avoid the implicit string value normalization\n            let payload: { [key: string]: any } = {};\n            payload[key] = val;\n            form.append(\"@jsonPayload\", JSON.stringify(payload));\n        } else {\n            // in case of mixed string and file/blob\n            const normalizedVal = Array.isArray(val) ? val : [val];\n            for (let v of normalizedVal) {\n                form.append(key, v);\n            }\n        }\n    }\n\n    return form;\n}\n\n/**\n * Converts the provided FormData instance into a plain object.\n *\n * For consistency with the server multipart/form-data inferring,\n * the following normalization rules are applied for plain multipart string values:\n *   - \"true\" is converted to the json \"true\"\n *   - \"false\" is converted to the json \"false\"\n *   - numeric strings are converted to json number ONLY if the resulted\n *     minimal number string representation is the same as the provided raw string\n *     (aka. scientific notations, \"Infinity\", \"0.0\", \"0001\", etc. are kept as string)\n *   - any other string (empty string too) is left as it is\n */\nexport function convertFormDataToObject(formData: FormData): { [key: string]: any } {\n    let result: { [key: string]: any } = {};\n\n    formData.forEach((v, k) => {\n        if (k === \"@jsonPayload\" && typeof v == \"string\") {\n            try {\n                let parsed = JSON.parse(v);\n                Object.assign(result, parsed);\n            } catch (err) {\n                console.warn(\"@jsonPayload error:\", err);\n            }\n        } else {\n            if (typeof result[k] !== \"undefined\") {\n                if (!Array.isArray(result[k])) {\n                    result[k] = [result[k]];\n                }\n                result[k].push(inferFormDataValue(v));\n            } else {\n                result[k] = inferFormDataValue(v);\n            }\n        }\n    });\n\n    return result;\n}\n\nconst inferNumberCharsRegex = /^[\\-\\.\\d]+$/;\n\nfunction inferFormDataValue(value: any): any {\n    if (typeof value != \"string\") {\n        return value;\n    }\n\n    if (value == \"true\") {\n        return true;\n    }\n\n    if (value == \"false\") {\n        return false;\n    }\n\n    // note: expects the provided raw string to match exactly with the minimal string representation of the parsed number\n    if (\n        (value[0] === \"-\" || (value[0] >= \"0\" && value[0] <= \"9\")) &&\n        inferNumberCharsRegex.test(value)\n    ) {\n        let num = +value;\n        if (\"\" + num === value) {\n            return num;\n        }\n    }\n\n    return value;\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { isFile, isFormData, convertFormDataToObject } from \"@/tools/formdata\";\nimport {\n    SendOptions,\n    RecordOptions,\n    normalizeUnknownQueryParams,\n    serializeQueryParams,\n} from \"@/tools/options\";\n\nexport interface BatchRequest {\n    method: string;\n    url: string;\n    json?: { [key: string]: any };\n    files?: { [key: string]: Array<any> };\n    headers?: { [key: string]: string };\n}\n\nexport interface BatchRequestResult {\n    status: number;\n    body: any;\n}\n\nexport class BatchService extends BaseService {\n    private requests: Array<BatchRequest> = [];\n    private subs: { [key: string]: SubBatchService } = {};\n\n    /**\n     * Starts constructing a batch request entry for the specified collection.\n     */\n    collection(collectionIdOrName: string): SubBatchService {\n        if (!this.subs[collectionIdOrName]) {\n            this.subs[collectionIdOrName] = new SubBatchService(\n                this.requests,\n                collectionIdOrName,\n            );\n        }\n\n        return this.subs[collectionIdOrName];\n    }\n\n    /**\n     * Sends the batch requests.\n     *\n     * @throws {ClientResponseError}\n     */\n    async send(options?: SendOptions): Promise<Array<BatchRequestResult>> {\n        const formData = new FormData();\n\n        const jsonData = [];\n\n        for (let i = 0; i < this.requests.length; i++) {\n            const req = this.requests[i];\n\n            jsonData.push({\n                method: req.method,\n                url: req.url,\n                headers: req.headers,\n                body: req.json,\n            });\n\n            if (req.files) {\n                for (let key in req.files) {\n                    const files = req.files[key] || [];\n                    for (let file of files) {\n                        formData.append(\"requests.\" + i + \".\" + key, file);\n                    }\n                }\n            }\n        }\n\n        formData.append(\"@jsonPayload\", JSON.stringify({ requests: jsonData }));\n\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: formData,\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/batch\", options);\n    }\n}\n\nexport class SubBatchService {\n    private requests: Array<BatchRequest> = [];\n    private readonly collectionIdOrName: string;\n\n    constructor(requests: Array<BatchRequest>, collectionIdOrName: string) {\n        this.requests = requests;\n        this.collectionIdOrName = collectionIdOrName;\n    }\n\n    /**\n     * Registers a record upsert request into the current batch queue.\n     *\n     * The request will be executed as update if `bodyParams` have a valid existing record `id` value, otherwise - create.\n     */\n    upsert(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): void {\n        options = Object.assign(\n            {\n                body: bodyParams || {},\n            },\n            options,\n        );\n\n        const request: BatchRequest = {\n            method: \"PUT\",\n            url:\n                \"/api/collections/\" +\n                encodeURIComponent(this.collectionIdOrName) +\n                \"/records\",\n        };\n\n        this.prepareRequest(request, options);\n\n        this.requests.push(request);\n    }\n\n    /**\n     * Registers a record create request into the current batch queue.\n     */\n    create(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): void {\n        options = Object.assign(\n            {\n                body: bodyParams || {},\n            },\n            options,\n        );\n\n        const request: BatchRequest = {\n            method: \"POST\",\n            url:\n                \"/api/collections/\" +\n                encodeURIComponent(this.collectionIdOrName) +\n                \"/records\",\n        };\n\n        this.prepareRequest(request, options);\n\n        this.requests.push(request);\n    }\n\n    /**\n     * Registers a record update request into the current batch queue.\n     */\n    update(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): void {\n        options = Object.assign(\n            {\n                body: bodyParams || {},\n            },\n            options,\n        );\n\n        const request: BatchRequest = {\n            method: \"PATCH\",\n            url:\n                \"/api/collections/\" +\n                encodeURIComponent(this.collectionIdOrName) +\n                \"/records/\" +\n                encodeURIComponent(id),\n        };\n\n        this.prepareRequest(request, options);\n\n        this.requests.push(request);\n    }\n\n    /**\n     * Registers a record delete request into the current batch queue.\n     */\n    delete(id: string, options?: SendOptions): void {\n        options = Object.assign({}, options);\n\n        const request: BatchRequest = {\n            method: \"DELETE\",\n            url:\n                \"/api/collections/\" +\n                encodeURIComponent(this.collectionIdOrName) +\n                \"/records/\" +\n                encodeURIComponent(id),\n        };\n\n        this.prepareRequest(request, options);\n\n        this.requests.push(request);\n    }\n\n    private prepareRequest(request: BatchRequest, options: SendOptions) {\n        normalizeUnknownQueryParams(options);\n\n        request.headers = options.headers;\n        request.json = {};\n        request.files = {};\n\n        // serialize query parameters\n        // -----------------------------------------------------------\n        if (typeof options.query !== \"undefined\") {\n            const query = serializeQueryParams(options.query);\n            if (query) {\n                request.url += (request.url.includes(\"?\") ? \"&\" : \"?\") + query;\n            }\n        }\n\n        // extract json and files body data\n        // -----------------------------------------------------------\n        let body = options.body;\n        if (isFormData(body)) {\n            body = convertFormDataToObject(body);\n        }\n\n        for (const key in body) {\n            const val = body[key];\n\n            if (isFile(val)) {\n                request.files[key] = request.files[key] || [];\n                request.files[key].push(val);\n            } else if (Array.isArray(val)) {\n                const foundFiles = [];\n                const foundRegular = [];\n                for (const v of val) {\n                    if (isFile(v)) {\n                        foundFiles.push(v);\n                    } else {\n                        foundRegular.push(v);\n                    }\n                }\n\n                if (foundFiles.length > 0 && foundFiles.length == val.length) {\n                    // only files\n                    // ---\n                    request.files[key] = request.files[key] || [];\n                    for (let file of foundFiles) {\n                        request.files[key].push(file);\n                    }\n                } else {\n                    // empty or mixed array (both regular and File/Blob values)\n                    // ---\n                    request.json[key] = foundRegular;\n\n                    if (foundFiles.length > 0) {\n                        // add \"+\" to append if not already since otherwise\n                        // the existing regular files will be deleted\n                        // (the mixed values order is preserved only within their corresponding groups)\n                        let fileKey = key;\n                        if (!key.startsWith(\"+\") && !key.endsWith(\"+\")) {\n                            fileKey += \"+\";\n                        }\n\n                        request.files[fileKey] = request.files[fileKey] || [];\n                        for (let file of foundFiles) {\n                            request.files[fileKey].push(file);\n                        }\n                    }\n                }\n            } else {\n                request.json[key] = val;\n            }\n        }\n    }\n}\n","import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseAuthStore } from \"@/stores/BaseAuthStore\";\nimport { LocalAuthStore } from \"@/stores/LocalAuthStore\";\nimport { SettingsService } from \"@/services/SettingsService\";\nimport { RecordService } from \"@/services/RecordService\";\nimport { CollectionService } from \"@/services/CollectionService\";\nimport { LogService } from \"@/services/LogService\";\nimport { RealtimeService } from \"@/services/RealtimeService\";\nimport { HealthService } from \"@/services/HealthService\";\nimport { FileService } from \"@/services/FileService\";\nimport { BackupService } from \"@/services/BackupService\";\nimport { CronService } from \"@/services/CronService\";\nimport { BatchService } from \"@/services/BatchService\";\nimport { RecordModel } from \"@/tools/dtos\";\nimport {\n    SendOptions,\n    FileOptions,\n    normalizeUnknownQueryParams,\n    serializeQueryParams,\n} from \"@/tools/options\";\nimport { isFormData, convertToFormDataIfNeeded } from \"@/tools/formdata\";\n\nexport interface BeforeSendResult {\n    [key: string]: any; // for backward compatibility\n    url?: string;\n    options?: { [key: string]: any };\n}\n\n/**\n * PocketBase JS Client.\n */\nexport default class Client {\n    /**\n     * The base PocketBase backend url address (eg. 'http://127.0.0.1.8090').\n     */\n    baseURL: string;\n\n    /**\n     * Legacy getter alias for baseURL.\n     * @deprecated Please replace with baseURL.\n     */\n    get baseUrl(): string {\n        return this.baseURL;\n    }\n\n    /**\n     * Legacy setter alias for baseURL.\n     * @deprecated Please replace with baseURL.\n     */\n    set baseUrl(v: string) {\n        this.baseURL = v;\n    }\n\n    /**\n     * Hook that get triggered right before sending the fetch request,\n     * allowing you to inspect and modify the url and request options.\n     *\n     * For list of the possible options check https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n     *\n     * You can return a non-empty result object `{ url, options }` to replace the url and request options entirely.\n     *\n     * Example:\n     * ```js\n     * const pb = new PocketBase(\"https://example.com\")\n     *\n     * pb.beforeSend = function (url, options) {\n     *     options.headers = Object.assign({}, options.headers, {\n     *         'X-Custom-Header': 'example',\n     *     })\n     *\n     *     return { url, options }\n     * }\n     *\n     * // use the created client as usual...\n     * ```\n     */\n    beforeSend?: (\n        url: string,\n        options: SendOptions,\n    ) => BeforeSendResult | Promise<BeforeSendResult>;\n\n    /**\n     * Hook that get triggered after successfully sending the fetch request,\n     * allowing you to inspect/modify the response object and its parsed data.\n     *\n     * Returns the new Promise resolved `data` that will be returned to the client.\n     *\n     * Example:\n     * ```js\n     * const pb = new PocketBase(\"https://example.com\")\n     *\n     * pb.afterSend = function (response, data, options) {\n     *     if (response.status != 200) {\n     *         throw new ClientResponseError({\n     *             url:      response.url,\n     *             status:   response.status,\n     *             response: { ... },\n     *         })\n     *     }\n     *\n     *     return data;\n     * }\n     *\n     * // use the created client as usual...\n     * ```\n     */\n    afterSend?: ((response: Response, data: any) => any) &\n        ((response: Response, data: any, options: SendOptions) => any);\n\n    /**\n     * Optional language code (default to `en-US`) that will be sent\n     * with the requests to the server as `Accept-Language` header.\n     */\n    lang: string;\n\n    /**\n     * A replaceable instance of the local auth store service.\n     */\n    authStore: BaseAuthStore;\n\n    /**\n     * An instance of the service that handles the **Settings APIs**.\n     */\n    readonly settings: SettingsService;\n\n    /**\n     * An instance of the service that handles the **Collection APIs**.\n     */\n    readonly collections: CollectionService;\n\n    /**\n     * An instance of the service that handles the **File APIs**.\n     */\n    readonly files: FileService;\n\n    /**\n     * An instance of the service that handles the **Log APIs**.\n     */\n    readonly logs: LogService;\n\n    /**\n     * An instance of the service that handles the **Realtime APIs**.\n     */\n    readonly realtime: RealtimeService;\n\n    /**\n     * An instance of the service that handles the **Health APIs**.\n     */\n    readonly health: HealthService;\n\n    /**\n     * An instance of the service that handles the **Backup APIs**.\n     */\n    readonly backups: BackupService;\n\n    /**\n     * An instance of the service that handles the **Cron APIs**.\n     */\n    readonly crons: CronService;\n\n    private cancelControllers: { [key: string]: AbortController } = {};\n    private recordServices: { [key: string]: RecordService } = {};\n    private enableAutoCancellation: boolean = true;\n\n    constructor(baseURL = \"/\", authStore?: BaseAuthStore | null, lang = \"en-US\") {\n        this.baseURL = baseURL;\n        this.lang = lang;\n\n        if (authStore) {\n            this.authStore = authStore;\n        } else if (typeof window != \"undefined\" && !!(window as any).Deno) {\n            // note: to avoid common security issues we fallback to runtime/memory store in case the code is running in Deno env\n            this.authStore = new BaseAuthStore();\n        } else {\n            this.authStore = new LocalAuthStore();\n        }\n\n        // common services\n        this.collections = new CollectionService(this);\n        this.files = new FileService(this);\n        this.logs = new LogService(this);\n        this.settings = new SettingsService(this);\n        this.realtime = new RealtimeService(this);\n        this.health = new HealthService(this);\n        this.backups = new BackupService(this);\n        this.crons = new CronService(this);\n    }\n\n    /**\n     * @deprecated\n     * With PocketBase v0.23.0 admins are converted to a regular auth\n     * collection named \"_superusers\", aka. you can use directly collection(\"_superusers\").\n     */\n    get admins(): RecordService {\n        return this.collection(\"_superusers\");\n    }\n\n    /**\n     * Creates a new batch handler for sending multiple transactional\n     * create/update/upsert/delete collection requests in one network call.\n     *\n     * Example:\n     * ```js\n     * const batch = pb.createBatch();\n     *\n     * batch.collection(\"example1\").create({ ... })\n     * batch.collection(\"example2\").update(\"RECORD_ID\", { ... })\n     * batch.collection(\"example3\").delete(\"RECORD_ID\")\n     * batch.collection(\"example4\").upsert({ ... })\n     *\n     * await batch.send()\n     * ```\n     */\n    createBatch(): BatchService {\n        return new BatchService(this);\n    }\n\n    /**\n     * Returns the RecordService associated to the specified collection.\n     */\n    collection<M = RecordModel>(idOrName: string): RecordService<M> {\n        if (!this.recordServices[idOrName]) {\n            this.recordServices[idOrName] = new RecordService(this, idOrName);\n        }\n\n        return this.recordServices[idOrName];\n    }\n\n    /**\n     * Globally enable or disable auto cancellation for pending duplicated requests.\n     */\n    autoCancellation(enable: boolean): Client {\n        this.enableAutoCancellation = !!enable;\n\n        return this;\n    }\n\n    /**\n     * Cancels single request by its cancellation key.\n     */\n    cancelRequest(requestKey: string): Client {\n        if (this.cancelControllers[requestKey]) {\n            this.cancelControllers[requestKey].abort();\n            delete this.cancelControllers[requestKey];\n        }\n\n        return this;\n    }\n\n    /**\n     * Cancels all pending requests.\n     */\n    cancelAllRequests(): Client {\n        for (let k in this.cancelControllers) {\n            this.cancelControllers[k].abort();\n        }\n\n        this.cancelControllers = {};\n\n        return this;\n    }\n\n    /**\n     * Constructs a filter expression with placeholders populated from a parameters object.\n     *\n     * Placeholder parameters are defined with the `{:paramName}` notation.\n     *\n     * The following parameter values are supported:\n     *\n     * - `string` (_single quotes are autoescaped_)\n     * - `number`\n     * - `boolean`\n     * - `Date` object (_stringified into the PocketBase datetime format_)\n     * - `null`\n     * - everything else is converted to a string using `JSON.stringify()`\n     *\n     * Example:\n     *\n     * ```js\n     * pb.collection(\"example\").getFirstListItem(pb.filter(\n     *    'title ~ {:title} && created >= {:created}',\n     *    { title: \"example\", created: new Date()}\n     * ))\n     * ```\n     */\n    filter(raw: string, params?: { [key: string]: any }): string {\n        if (!params) {\n            return raw;\n        }\n\n        for (let key in params) {\n            let val = params[key];\n            switch (typeof val) {\n                case \"boolean\":\n                case \"number\":\n                    val = \"\" + val;\n                    break;\n                case \"string\":\n                    val = \"'\" + val.replace(/'/g, \"\\\\'\") + \"'\";\n                    break;\n                default:\n                    if (val === null) {\n                        val = \"null\";\n                    } else if (val instanceof Date) {\n                        val = \"'\" + val.toISOString().replace(\"T\", \" \") + \"'\";\n                    } else {\n                        val = \"'\" + JSON.stringify(val).replace(/'/g, \"\\\\'\") + \"'\";\n                    }\n            }\n            raw = raw.replaceAll(\"{:\" + key + \"}\", val);\n        }\n\n        return raw;\n    }\n\n    /**\n     * @deprecated Please use `pb.files.getURL()`.\n     */\n    getFileUrl(\n        record: { [key: string]: any },\n        filename: string,\n        queryParams: FileOptions = {},\n    ): string {\n        console.warn(\"Please replace pb.getFileUrl() with pb.files.getURL()\");\n        return this.files.getURL(record, filename, queryParams);\n    }\n\n    /**\n     * @deprecated Please use `pb.buildURL()`.\n     */\n    buildUrl(path: string): string {\n        console.warn(\"Please replace pb.buildUrl() with pb.buildURL()\");\n        return this.buildURL(path);\n    }\n\n    /**\n     * Builds a full client url by safely concatenating the provided path.\n     */\n    buildURL(path: string): string {\n        let url = this.baseURL;\n\n        // construct an absolute base url if in a browser environment\n        if (\n            typeof window !== \"undefined\" &&\n            !!window.location &&\n            !url.startsWith(\"https://\") &&\n            !url.startsWith(\"http://\")\n        ) {\n            url = window.location.origin?.endsWith(\"/\")\n                ? window.location.origin.substring(0, window.location.origin.length - 1)\n                : window.location.origin || \"\";\n\n            if (!this.baseURL.startsWith(\"/\")) {\n                url += window.location.pathname || \"/\";\n                url += url.endsWith(\"/\") ? \"\" : \"/\";\n            }\n\n            url += this.baseURL;\n        }\n\n        // concatenate the path\n        if (path) {\n            url += url.endsWith(\"/\") ? \"\" : \"/\"; // append trailing slash if missing\n            url += path.startsWith(\"/\") ? path.substring(1) : path;\n        }\n\n        return url;\n    }\n\n    /**\n     * Sends an api http request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async send<T = any>(path: string, options: SendOptions): Promise<T> {\n        options = this.initSendOptions(path, options);\n\n        // build url + path\n        let url = this.buildURL(path);\n\n        if (this.beforeSend) {\n            const result = Object.assign({}, await this.beforeSend(url, options));\n            if (\n                typeof result.url !== \"undefined\" ||\n                typeof result.options !== \"undefined\"\n            ) {\n                url = result.url || url;\n                options = result.options || options;\n            } else if (Object.keys(result).length) {\n                // legacy behavior\n                options = result as SendOptions;\n                console?.warn &&\n                    console.warn(\n                        \"Deprecated format of beforeSend return: please use `return { url, options }`, instead of `return options`.\",\n                    );\n            }\n        }\n\n        // serialize the query parameters\n        if (typeof options.query !== \"undefined\") {\n            const query = serializeQueryParams(options.query);\n            if (query) {\n                url += (url.includes(\"?\") ? \"&\" : \"?\") + query;\n            }\n            delete options.query;\n        }\n\n        // ensures that the json body is serialized\n        if (\n            this.getHeader(options.headers, \"Content-Type\") == \"application/json\" &&\n            options.body &&\n            typeof options.body !== \"string\"\n        ) {\n            options.body = JSON.stringify(options.body);\n        }\n\n        const fetchFunc = options.fetch || fetch;\n\n        // send the request\n        return fetchFunc(url, options)\n            .then(async (response) => {\n                let data: any = {};\n\n                try {\n                    data = await response.json();\n                } catch (_) {\n                    // all api responses are expected to return json\n                    // with the exception of the realtime event and 204\n                }\n\n                if (this.afterSend) {\n                    data = await this.afterSend(response, data, options);\n                }\n\n                if (response.status >= 400) {\n                    throw new ClientResponseError({\n                        url: response.url,\n                        status: response.status,\n                        data: data,\n                    });\n                }\n\n                return data as T;\n            })\n            .catch((err) => {\n                // wrap to normalize all errors\n                throw new ClientResponseError(err);\n            });\n    }\n\n    /**\n     * Shallow copy the provided object and takes care to initialize\n     * any options required to preserve the backward compatability.\n     *\n     * @param  {SendOptions} options\n     * @return {SendOptions}\n     */\n    private initSendOptions(path: string, options: SendOptions): SendOptions {\n        options = Object.assign({ method: \"GET\" } as SendOptions, options);\n\n        // auto convert the body to FormData, if needed\n        options.body = convertToFormDataIfNeeded(options.body);\n\n        // move unknown send options as query parameters\n        normalizeUnknownQueryParams(options);\n\n        // requestKey normalizations for backward-compatibility\n        // ---\n        options.query = Object.assign({}, options.params, options.query);\n        if (typeof options.requestKey === \"undefined\") {\n            if (options.$autoCancel === false || options.query.$autoCancel === false) {\n                options.requestKey = null;\n            } else if (options.$cancelKey || options.query.$cancelKey) {\n                options.requestKey = options.$cancelKey || options.query.$cancelKey;\n            }\n        }\n        // remove the deprecated special cancellation params from the other query params\n        delete options.$autoCancel;\n        delete options.query.$autoCancel;\n        delete options.$cancelKey;\n        delete options.query.$cancelKey;\n        // ---\n\n        // add the json header, if not explicitly set\n        // (for FormData body the Content-Type header should be skipped since the boundary is autogenerated)\n        if (\n            this.getHeader(options.headers, \"Content-Type\") === null &&\n            !isFormData(options.body)\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                \"Content-Type\": \"application/json\",\n            });\n        }\n\n        // add Accept-Language header, if not explicitly set\n        if (this.getHeader(options.headers, \"Accept-Language\") === null) {\n            options.headers = Object.assign({}, options.headers, {\n                \"Accept-Language\": this.lang,\n            });\n        }\n\n        // check if Authorization header can be added\n        if (\n            // has valid token\n            this.authStore.token &&\n            // auth header is not explicitly set\n            this.getHeader(options.headers, \"Authorization\") === null\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                Authorization: this.authStore.token,\n            });\n        }\n\n        // handle auto cancelation for duplicated pending request\n        if (this.enableAutoCancellation && options.requestKey !== null) {\n            const requestKey = options.requestKey || (options.method || \"GET\") + path;\n\n            delete options.requestKey;\n\n            // cancel previous pending requests\n            this.cancelRequest(requestKey);\n\n            const controller = new AbortController();\n            this.cancelControllers[requestKey] = controller;\n            options.signal = controller.signal;\n        }\n\n        return options;\n    }\n\n    /**\n     * Extracts the header with the provided name in case-insensitive manner.\n     * Returns `null` if no header matching the name is found.\n     */\n    private getHeader(\n        headers: { [key: string]: string } | undefined,\n        name: string,\n    ): string | null {\n        headers = headers || {};\n        name = name.toLowerCase();\n\n        for (let key in headers) {\n            if (key.toLowerCase() == name) {\n                return headers[key];\n            }\n        }\n\n        return null;\n    }\n}\n","import { BaseAuthStore, AuthRecord } from \"@/stores/BaseAuthStore\";\n\nexport type AsyncSaveFunc = (serializedPayload: string) => Promise<void>;\n\nexport type AsyncClearFunc = () => Promise<void>;\n\ntype queueFunc = () => Promise<void>;\n\n/**\n * AsyncAuthStore is a helper auth store implementation\n * that could be used with any external async persistent layer\n * (key-value db, local file, etc.).\n *\n * Here is an example with the React Native AsyncStorage package:\n *\n * ```\n * import AsyncStorage from \"@react-native-async-storage/async-storage\";\n * import PocketBase, { AsyncAuthStore } from \"pocketbase\";\n *\n * const store = new AsyncAuthStore({\n *     save:    async (serialized) => AsyncStorage.setItem(\"pb_auth\", serialized),\n *     initial: AsyncStorage.getItem(\"pb_auth\"),\n * });\n *\n * const pb = new PocketBase(\"https://example.com\", store)\n * ```\n */\nexport class AsyncAuthStore extends BaseAuthStore {\n    private saveFunc: AsyncSaveFunc;\n    private clearFunc?: AsyncClearFunc;\n    private queue: Array<queueFunc> = [];\n\n    constructor(config: {\n        // The async function that is called every time\n        // when the auth store state needs to be persisted.\n        save: AsyncSaveFunc;\n\n        /// An *optional* async function that is called every time\n        /// when the auth store needs to be cleared.\n        ///\n        /// If not explicitly set, `saveFunc` with empty data will be used.\n        clear?: AsyncClearFunc;\n\n        // An *optional* initial data to load into the store.\n        initial?: string | Promise<any>;\n    }) {\n        super();\n\n        this.saveFunc = config.save;\n        this.clearFunc = config.clear;\n\n        this._enqueue(() => this._loadInitial(config.initial));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, record?: AuthRecord): void {\n        super.save(token, record);\n\n        let value = \"\";\n        try {\n            value = JSON.stringify({ token, record });\n        } catch (err) {\n            console.warn(\"AsyncAuthStore: failed to stringify the new state\");\n        }\n\n        this._enqueue(() => this.saveFunc(value));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear(): void {\n        super.clear();\n\n        if (this.clearFunc) {\n            this._enqueue(() => this.clearFunc!());\n        } else {\n            this._enqueue(() => this.saveFunc(\"\"));\n        }\n    }\n\n    /**\n     * Initializes the auth store state.\n     */\n    private async _loadInitial(payload?: string | Promise<any>) {\n        try {\n            payload = await payload;\n\n            if (payload) {\n                let parsed;\n                if (typeof payload === \"string\") {\n                    parsed = JSON.parse(payload) || {};\n                } else if (typeof payload === \"object\") {\n                    parsed = payload;\n                }\n\n                this.save(parsed.token || \"\", parsed.record || parsed.model || null);\n            }\n        } catch (_) {}\n    }\n\n    /**\n     * Appends an async function to the queue.\n     */\n    private _enqueue(asyncCallback: () => Promise<void>) {\n        this.queue.push(asyncCallback);\n\n        if (this.queue.length == 1) {\n            this._dequeue();\n        }\n    }\n\n    /**\n     * Starts the queue processing.\n     */\n    private _dequeue() {\n        if (!this.queue.length) {\n            return;\n        }\n\n        this.queue[0]().finally(() => {\n            this.queue.shift();\n\n            if (!this.queue.length) {\n                return;\n            }\n\n            this._dequeue();\n        });\n    }\n}\n"],"names":["ClientResponseError","Error","constructor","errData","super","this","url","status","response","isAbort","originalError","Object","setPrototypeOf","prototype","data","DOMException","name","message","cause","includes","toJSON","fieldContentRegExp","cookieParse","str","options","result","decode","assign","defaultDecode","index","length","eqIdx","indexOf","endIdx","lastIndexOf","key","slice","trim","undefined","val","charCodeAt","_","cookieSerialize","opt","encode","defaultEncode","test","TypeError","value","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","isDate","toString","call","Date","valueOf","toUTCString","httpOnly","secure","priority","toLowerCase","sameSite","decodeURIComponent","encodeURIComponent","isReactNative","navigator","product","global","HermesInternal","atobPolyfill","getTokenPayload","token","encodedPayload","split","map","c","join","JSON","parse","e","isTokenExpired","expirationThreshold","payload","keys","exp","now","atob","input","String","replace","bs","buffer","bc","idx","output","charAt","fromCharCode","defaultCookieKey","BaseAuthStore","baseToken","baseModel","_onChangeCallbacks","record","model","isValid","isSuperuser","type","collectionName","collectionId","isAdmin","console","warn","isAuthRecord","save","triggerChange","clear","loadFromCookie","cookie","rawData","Array","isArray","exportToCookie","defaultOptions","stringify","resultLength","Blob","size","id","email","extraProps","prop","onChange","callback","fireImmediately","push","i","splice","LocalAuthStore","storageKey","storageFallback","_bindStorageEvent","_storageGet","_storageSet","_storageRemove","window","localStorage","rawValue","getItem","normalizedVal","setItem","removeItem","addEventListener","BaseService","client","SettingsService","getAll","method","send","update","bodyParams","body","testS3","filesystem","then","testEmail","collectionIdOrName","toEmail","emailTemplate","template","collection","generateAppleClientSecret","clientId","teamId","keyId","privateKey","duration","knownSendOptionsKeys","normalizeUnknownQueryParams","query","serializeQueryParams","params","encodedKey","arrValue","v","prepareQueryParamValue","toISOString","RealtimeService","eventSource","subscriptions","lastSentSubscriptions","maxConnectTimeout","reconnectAttempts","maxReconnectAttempts","Infinity","predefinedReconnectIntervals","pendingConnects","isConnected","subscribe","topic","serialized","headers","listener","msgEvent","submitSubscriptions","connect","async","unsubscribeByTopicAndListener","unsubscribe","needToSubmit","subs","getSubscriptionsByTopic","hasSubscriptionListeners","removeEventListener","disconnect","unsubscribeByPrefix","keyPrefix","hasAtleastOneTopic","startsWith","exist","keyToCheck","addAllSubscriptionListeners","getNonEmptySubscriptionKeys","requestKey","getSubscriptionsCancelKey","catch","err","removeAllSubscriptionListeners","Promise","resolve","reject","initConnect","clearTimeout","connectTimeoutId","setTimeout","connectErrorHandler","EventSource","buildURL","onerror","lastEventId","retries","hasUnsentSubscriptions","p","reconnectTimeoutId","connectSubs","latestTopics","t","timeout","fromReconnect","onDisconnect","cancelRequest","close","CrudService","getFullList","batchOrqueryParams","_getFullList","batch","getList","page","perPage","baseCrudPath","responseData","items","item","getFirstListItem","filter","skipTotal","code","getOne","create","batchSize","request","list","concat","normalizeLegacyOptionsArgs","legacyWarn","baseOptions","bodyOrOptions","hasQuery","resetAutoRefresh","_resetAutoRefresh","RecordService","baseCollectionPath","isSuperusers","realtime","batchOrOptions","authStore","authExpand","expand","authRecord","delete","success","authResponse","listAuthMethods","fields","authWithPassword","usernameOrEmail","password","autoRefreshThreshold","identity","autoRefresh","authData","registerAutoRefresh","threshold","refreshFunc","reauthenticateFunc","oldBeforeSend","beforeSend","oldModel","unsubStoreChange","newToken","sendOptions","oldToken","authRefresh","authWithOAuth2Code","provider","codeVerifier","redirectURL","createData","authWithOAuth2","args","config","eagerDefaultPopup","urlCallback","openBrowserPopup","cleanup","requestKeyOptions","authMethods","oauth2","providers","find","cancelController","signal","onabort","oldState","state","error","scopes","replacements","_replaceQueryParams","authURL","location","href","requestPasswordReset","confirmPasswordReset","passwordResetToken","passwordConfirm","requestVerification","confirmVerification","verificationToken","verified","requestEmailChange","newEmail","confirmEmailChange","emailChangeToken","listExternalAuths","recordId","unlinkExternalAuth","ea","requestOTP","authWithOTP","otpId","impersonate","Authorization","Client","baseURL","lang","urlPath","substring","parsedParams","rawParams","param","pair","hasOwnProperty","open","width","height","windowWidth","innerWidth","windowHeight","innerHeight","left","top","CollectionService","import","collections","deleteMissing","getScaffolds","truncate","LogService","getStats","HealthService","check","FileService","getUrl","filename","queryParams","getURL","parts","download","URLSearchParams","getToken","BackupService","basename","upload","restore","getDownloadUrl","getDownloadURL","CronService","run","jobId","isFile","File","uri","isFormData","FormData","hasFileField","values","inferNumberCharsRegex","inferFormDataValue","num","BatchService","requests","SubBatchService","formData","jsonData","req","json","files","file","append","upsert","prepareRequest","convertFormDataToObject","forEach","k","parsed","foundFiles","foundRegular","fileKey","endsWith","baseUrl","cancelControllers","recordServices","enableAutoCancellation","Deno","logs","settings","health","backups","crons","admins","createBatch","idOrName","autoCancellation","enable","abort","cancelAllRequests","raw","replaceAll","getFileUrl","buildUrl","origin","pathname","initSendOptions","getHeader","fetch","afterSend","convertToFormDataIfNeeded","form","$autoCancel","$cancelKey","controller","AbortController","AsyncAuthStore","queue","saveFunc","clearFunc","_enqueue","_loadInitial","initial","asyncCallback","_dequeue","finally","shift"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"debugId":null}}]
}